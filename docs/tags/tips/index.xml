<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tips on 文藝部LaTeX研究会</title>
    <link>https://qdaibungei.github.io/latex/tags/tips/</link>
    <description>Recent content in Tips on 文藝部LaTeX研究会</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 07 Sep 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://qdaibungei.github.io/latex/tags/tips/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>git diff で一文字ずつ差分表示する</title>
      <link>https://qdaibungei.github.io/latex/documents/2019-09-07-git-diff/</link>
      <pubDate>Sat, 07 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2019-09-07-git-diff/</guid>
      <description> 方法 git diff で一文字ずつ差分表示するには次のようにすればよい。
git diff --color-words --word-diff-regex=&amp;#39;\\w+|[^[:space:]]&amp;#39; 参考文献  git diff を1文字単位で出力する  </description>
    </item>
    
    <item>
      <title>和文フォントを混植する方法</title>
      <link>https://qdaibungei.github.io/latex/documents/2019-03-31-konsyoku/</link>
      <pubDate>Sun, 31 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2019-03-31-konsyoku/</guid>
      <description>はじめに 和文フォントは、平仮名や片仮名だけ別のフォントに置き換えて使用することがある。漢字は同じでも、平仮名が違えば、紙面の印象を大きく変えることができるからだ。このように、漢字と平仮名とで別のフォントを使うことを「混植」と言う。
LaTeXで混植をする方法の解説としては、これまでにも優れた記事がいくつか存在している。例えば「ヒラギノ明朝W2と游築五号仮名W2混植方法」など。しかしそこに書かれた方法は、いくぶんか簡略的なものだというきらいがある。otfパッケージのburasageオプションが使えなかったり、upLaTeXでは使えなかったりするのだ。
そこで本稿では、上述の欠点への補足として、やや備忘録的に記事を書いてみたい。
必要なファイルの用意 まず、必要なファイルを揃えておこう。ここでは游明朝体と游明朝体五号かなの混植をしてみよう。
CTANにあるjapanese-otfパッケージからbaseplとscriptというディレクトリをダウンロード。またmkjvfもダウンロードしておく。
同様にjapanese-otf-uptexからbasepl、script、umkjvfをダウンロード。
さらに次のスクリプトを作成する。
#!/bin/sh  mkdir tfm mkdir vf # 普通にtfmファイルを生成 for face in r b do for hv in h v do ppltotf basepl/base-${hv}.pl yumin5go${face}-${hv} ppltotf basepl/base-${hv}.pl expyumin5go${face}-${hv} ppltotf basepl/brsg-${hv}.pl brsgyumin5go${face}-${hv} ppltotf basepl/brsg-${hv}.pl brsgexpyumin5go${face}-${hv} #  uppltotf -kanji=uptex basepl/ubase-${hv}.pl upyumin5go${face}-${hv} uppltotf -kanji=uptex basepl/ubase-${hv}.pl upexpyumin5go${face}-${hv} uppltotf -kanji=uptex basepl/ubrsg-${hv}.pl upbrsgyumin5go${face}-${hv} uppltotf -kanji=uptex basepl/ubrsg-${hv}.pl upbrsgexpyumin5go${face}-${hv} done done # ここが混植のキモ。 # 混植しないときは引数二つでよかったが、混植のため引数は三つ。 # しかし仕組みはあまり理解できていない。 for face in r b do for hv in h v do perl mkjvf -m yumin5go${face}-${hv} hmin${face}-${hv} r-yumin5go${face}-${hv} perl mkjvf -m -sage brsgyumin5go${face}-${hv} hmin${face}-${hv} r-yumin5go${face}-${hv} perl mkjvf -m -expert expyumin5go${face}-${hv} hmin${face}-${hv} cidjmin${face} perl mkjvf -m -sage -expert brsgexpyumin5go${face}-${hv} hmin${face}-${hv} cidjmin${face} done done for face in r b do for hv in h v do perl umkjvf -m -ucs -sp 1 upyumin5go${face}-${hv} uphmin${face}-${hv} r-upyumin5go${face}-${hv} perl umkjvf -m -ucs -sp 1 -sage upbrsgyumin5go${face}-${hv} uphmin${face}-${hv} r-upyumin5go${face}-${hv} perl umkjvf -m -ucs -sp 1 -expert upexpyumin5go${face}-${hv} uphmin${face}-${hv} cidjmin${face} perl umkjvf -m -ucs -sp 1 -sage -expert upbrsgexpyumin5go${face}-${hv} uphmin${face}-${hv} cidjmin${face} done done echo &amp;#34;making tfm for supplementary plane .</description>
    </item>
    
    <item>
      <title>CTANにない欧文フォントをLaTeXにインストールする</title>
      <link>https://qdaibungei.github.io/latex/documents/2019-03-29-font-install/</link>
      <pubDate>Fri, 29 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2019-03-29-font-install/</guid>
      <description>はじめに upLaTeXにおいて、CTANに存在する欧文フォントをインストールするのは容易だ。しかしCTANに存在しないフォントをインストールするのは難しい。
困難の原因は、二つある。第一は、tfmファイルやmapファイルを生成するのが難しいことである。第二は、フォント設定ファイルの作り方が分かりづらいことである。
そこで、備忘録を兼ね、以下にその方法を記す。
一つのウェイトをインストールしてみる tfmなどの生成 フォントの形式は通常、otfやttfなどであるが、TeXはそれらを直接に扱うことができない。そこでtfmファイルなどのフォントファイルを生成する必要がある。面倒だが、フォントごとに別のtfmを生成せねばならない。
tfmを生成するためには「otftotfm」というソフトを使う。otftotfmはふつうTeXをインストールしたときに一緒にインストールされているはずだ。インストールされているかどうかを確認するためには、ターミナルで「otftotfm &amp;ndash;version」と打ち、ヴァージョン情報が返ってくるかどうかを確かめればよい。
さて今回はGoogle Fontsに収録されているJosefin Slabというフォントをインストールしてみよう。まずは、一つのウェイト（Regular）だけをインストールしてみる。
まず作業用ディレクトリを適当に作っておき、そこにJosefinSlab-Regular.ttfを入れておく。ターミナルで作業用ディレクトリに行き、次のコマンドを実行してみよう。
otftotfm --no-type1 --no-dotlessj --mapfile=josefinslab.map -e ec.enc -n josefinslab-regular JosefinSlab-Regular.ttf すると、○○○.tfm、○○○.vf、○○○.map、○○○.encという四種類のファイルが生成されるはずである1。一応、オプションの意味を説明しておこう。
 --no-type1 --no-dotlessjは、「Type 1フォントへの変換を行わない」ということ、らしい。あまり理解できていない。 --mapfile=josefinslab.mapで、mapファイルの指定をする。 -e ec.encは、エンコーディングファイルの指定。ec.encを指定すると、T1エンコーディングになる。ちなみにtexnansi.encを指定するとLY1エンコーディングになる。エンコーディングって何なのかいまいち分かっていないが、私はT1エンコーディングにしておいて困ったことはない。 -n josefinslab-regularは、tfm名の指定。  また、-fkernとすればカーニングの、-fligaとすればリガチャの情報を、tfmに含ませることができる。Josefin Slabにはこれらの機能がなかったから上ではこのオプションをつけていないが、この機能があればつけたほうがよい。otfinfo -f JosefinSlab-Regular.ttfなどとすれば、どのような機能が備わっているかを確認できる。
styファイルの作成 各種ファイルが生成できたならば、すかさず、josefinslab.styという名前でstyファイルを作る。
% % josefinslab.sty % \AtBeginDvi{\special{pdf:mapfile josefinslab.map}}% 先程生成したmapファイルの読み込み \DeclareFontFamily{T1}{josefinslab}{}% TeXファイル内で使うフォント名を設定 \DeclareFontShape{T1}{josefinslab}{m}{n}{&amp;lt;-&amp;gt; josefinslab-regular}{}% 上で設定したフォント名と、先程生成したtfmファイルとを結びつける \endinput インストールできたかを確認 ここまでできたら、ほとんどインストールは完了したと言ってよい（今のままだと、各種ファイルがディレクトリにたくさん散らばっていて、気持ち悪いかもしれないが、この問題は次の節で解決する）。
動作確認のため、作業用ディレクトリにTeXファイルを作って、フォントが埋め込まれるかをチェックしておこう。
\documentclass[uplatex]{jsarticle} \usepackage{josefinslab} \begin{document} \romanfamily{josefinslab}\selectfont This is a test. \end{document} 「This is a test.」がJosefin Slabで表示されたら、ここまでの作業はうまくいったことになる。</description>
    </item>
    
    <item>
      <title>otfパッケージのぶら下げ組をちょっと改良する</title>
      <link>https://qdaibungei.github.io/latex/documents/2018-01-12-burasage/</link>
      <pubDate>Fri, 12 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2018-01-12-burasage/</guid>
      <description> 緒言 本稿は、otfパッケージによるぶら下げ組を改良するための方法を記すものである。
本論 otfパッケージにはburasageオプションがあり、これを利用するとぶら下げ組ができる。
\usepackage[burasage]{otf} しかし、このぶら下げ組にはひとつ問題がある。句読点が行末に来たとき、必ずぶら下げ処理がおこなわれてしまうのである1。
むろん、これはこれでひとつの立派な組版方針である。だが、行長が短いときに強制的にぶら下げ処理がおこなわれてしまうと、字間が開いてしまい、間延びした印象の組みかたになってしまう。よって、われわれとしては、ぶら下げ処理を少し抑制するように修正してみたい。これは、商業出版の本によく見られる組みかたでもある。
そこで、プリアンブルなどに以下のように記述し、\。と\、というマクロを作る。
\if@burasage \def\、{%  \@ifnextchar\par{、}{、\hbox{}}%  }%  \def\。{%  \@ifnextchar\par{。}{。\hbox{}}%  }% \else \def\、{\nobreak\makebox[1zw][l]{、}}%  \def\。{\nobreak\makebox[1zw][l]{。}}% \fi あとは、文章中の句読点すべてを\。および\、で置き換えればよい。すると、burasageオプション時には適度にぶら下げが抑制された組みかたとなる。また、burasageオプションを外したときには、追い出し組となる。
細かい調整 ただし、このままでは句読点と括弧類とが並んだとき、空きが広くなりすぎてしまう。たとえば、\。「のように、句読点の直後に始め括弧が来た場合、\。\&amp;lt;「とする（つまり\&amp;lt;を追加する）ことが必要となる。
句点と鉤括弧の場合だけ考えると、結局、以下のような置換が必要である。
 \。「 → \。\&amp;lt;「 \。」 → 。」 」\。 → 」\&amp;lt;\。  このような置換を、すべての括弧類と句読点との組み合わせを考えて、おこなえばよい。置換作業は手作業だと面倒きわまりないので、PythonなりRubyなりで置換スクリプトを組んで置換するのがよいであろう。
結言 LaTeXのデフォルトは追い込み組であるが、これは商業出版にはあまり見られない。そこで上のような設定をし、ぶら下げ組にするか、追い出し組にするとよいのである。そうすれば、いっそう商業出版に近い組みかたが実現でき、嬉しい気分に浸れることであろう。
 ただし段落末尾はそのかぎりではない。 ↩   </description>
    </item>
    
    <item>
      <title>LaTeXによる小説誌制作のヒント</title>
      <link>https://qdaibungei.github.io/latex/documents/2017-10-12-book-making-hints/</link>
      <pubDate>Thu, 12 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2017-10-12-book-making-hints/</guid>
      <description>緒言 以下では、小説誌制作をLaTeXでおこなう場合のヒントを述べる。
フォントの指定 LaTeXのデフォルトフォントはあまり小説向きではない。そこで以下のように記述しフォントを変更する。
まず日本語フォントであるが、特にこだわりがないならば、とりあえず游明朝にしておくとよい。游明朝を使うには、以下のように書く（以下はuplatexを使うことを前提とした書き方である。いまどきわざわざplatexを使う理由はあるまい）。
% uplatexでA5サイズの本を作る場合のdocumentclassの書きかた \documentclass[a5paper,papersize,uplatex]{jsbook} % 日本語フォントを游明朝にする \usepackage[deluxe,uplatex]{otf} \AtBeginDvi{\special{pdf:mapfile otf-up-yu-win10.map}}% Windows 10以外の場合は適宜変更せよ 欧文フォントも変更しておこう。
% 欧文フォントの変更 \usepackage[scale=1.05]{cochineal}% この欧文フォントはわりと游明朝に合う \usepackage[scale=0.95,defaultsans]{opensans} jdashパッケージ 游明朝だと、ダッシュ――がつながらない。そこでjdashパッケージを導入し、これを使う。jdashパッケージについてはここを参照のこと。
hanmenパッケージの使用 まずhanmenパッケージをダウンロードし、TeXファイルと同じフォルダへ入れる。
そしてプリアンブルに以下を記述する。
% 上のフォント設定をした後に書く \usepackage[Q=13,H=22,W=49,L=21,ko=3.875truemm,te=6.5truemm,footskip=2.47truemm,tate]{hanmen} % ついでに、欧文のベースラインなどを適当に変更しておこう \tbaselineshift=.3zw \kanjiskip=0zw plus .25zw minus .03125zw \xkanjiskip=.25zw plus .25zw minus .0625zw これで厳密な版面の設定が可能となる。厳密というのは、たとえば表と裏とで行が揃っているということである（厳密な設定をしないと、行がズレる。紙を透かして見ると行がズレているかどうか分かる）。
hanmenパッケージの使い方の詳細はこの記事を参照のこと。
\tcyマクロ LaTeXで縦書きをするさい、縦中横には\rensujiを使うよう言われる。しかし\rensujiだと前後のアキがおかしくなる（たとえば、行頭で\rensujiを使うとインデント量が狂う）。そこで\tcy命令を新たに作り、これを使うのがよい。
\usepackage{plext} \makeatletter \chardef\nvlsty@zenkakuSpace=\jis&amp;#34;2121\relax \newcommand{\tcy}[1]{%  \nvlsty@zenkakuSpace\kern-1zw\relax \leavevmode\hbox to 1zw{%  \centering\rensuji*{#1}\relax }\relax \kern-1zw\nvlsty@zenkakuSpace } \makeatother 以上をプリアンブルなどに書いておく。使いかたは至ってかんたんで、\tcy{12}時、のようにすればよい。
禁則処理の設定 縦書きの場合、禁則処理はほどほどに抑制しておくと商業出版物の組版に似せることができる。プリアンブルなどに以下を記述する。
\clubpenalty=0 \widowpenalty=0 \jcharwidowpenalty=0 \displaywidowpenalty=0 \prebreakpenalty\jis&amp;#34;2147=10000 % 5000 ’ \postbreakpenalty\jis&amp;#34;2148=10000 % 5000 “ \prebreakpenalty\jis&amp;#34;2149=10000 % 5000 ” \inhibitxspcode`〒=2 \prebreakpenalty\jis&amp;#34;2133=10000 \prebreakpenalty\jis&amp;#34;2134=10000 \prebreakpenalty\jis&amp;#34;2135=10000 \prebreakpenalty\jis&amp;#34;2136=10000 \prebreakpenalty`ー=0 \prebreakpenalty`ぁ=0 \prebreakpenalty`ぃ=0 \prebreakpenalty`ぅ=0 \prebreakpenalty`ぇ=0 \prebreakpenalty`ぉ=0 \prebreakpenalty`っ=0 \prebreakpenalty`ゃ=0 \prebreakpenalty`ゅ=0 \prebreakpenalty`ょ=0 \prebreakpenalty\jis&amp;#34;246E=0 %ゎ \prebreakpenalty`ァ=0 \prebreakpenalty`ィ=0 \prebreakpenalty`ゥ=0 \prebreakpenalty`ェ=0 \prebreakpenalty`ォ=0 \prebreakpenalty`ッ=0 \prebreakpenalty`ャ=0 \prebreakpenalty`ュ=0 \prebreakpenalty`ョ=0 \prebreakpenalty\jis&amp;#34;256E=0 %ヮ \prebreakpenalty\jis&amp;#34;2575=0 %ヵ \prebreakpenalty\jis&amp;#34;2576=0 %ヶ \prebreakpenalty\jis&amp;#34;2139=0 %々 フッター 以前出した本のフッターの設定はだいたいこんな感じである。</description>
    </item>
    
    <item>
      <title>LaTeXによるPDFの生成と加工</title>
      <link>https://qdaibungei.github.io/latex/documents/2017-09-27-pdfpages/</link>
      <pubDate>Wed, 27 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2017-09-27-pdfpages/</guid>
      <description>緒言 本稿はLaTeXを用いてPDFを生成・加工する方法を示すものである。
Adobeの有料ソフトを使うならばPDF加工は容易であるが、無償のソフトウェアだけを用いてPDFを加工するのは通常難しい。しかし、LaTeXを用いれば無償でかんたんにPDFを加工できる。それを実現するのがpdfpagesパッケージである。
そこで以下ではpdfpagesパッケージの使いかたをかんたんに記すことにする（ただし自分用メモとしての意味合いが強く、きちんとは解説していない）。
pdfpagesパッケージの使いかた 大きさを指定して画像をPDF化する 以下をhoge.texという拡張子で保存し、pdflatex hoge.texとすればhoge.pdfというPDFファイルが生成される。
\documentclass{article} \usepackage{pdfpages} \usepackage[papersize={308.341truemm,216truemm}]{geometry} \begin{document} \includepdf{image.jpg} \end{document} \includepdfという命令で画像ファイルを読み込み、出力しているだけである。geometryパッケージにより画像の縦横の長さを設定することが可能である。
縦横比そのままに画像をPDF化する \documentclass{article} \usepackage{pdfpages} \begin{document} \includepdf[fitpaper]{image.jpg} \end{document} このようにfitpaperオプションつきで画像を読み込むと、画像の縦横比に合わせて用紙サイズが決定される。
PDFファイルの連結 以下はA5サイズの本を作っているとき、左右のページをつなげてA4用紙に出力するやりかたである。デザインを確認したいときなどに有用である。
\documentclass[a4paper,landscape]{article} \usepackage{pdfpages} \begin{document} \includepdf[pages={28,29},nup=2x1]{mybook.pdf} \end{document} pages={28,29}は28～29ページだけを読み込む設定、nupは複数ページを一枚に並べる設定である。nup=2x1は2行×1列で並べるという意味になる。
自炊したPDFファイルの加工と連結 \documentclass{article} \usepackage{pdfpages} \usepackage[a5paper]{geometry} \begin{document} \includepdf[pages=-,scale=1.25,offset=-14mm -23mm]{1.pdf} \includepdf[pages=-,scale=1.25,offset=-14mm -23mm]{2.pdf} \includepdf[pages=-,scale=1.25,offset=-14mm -23mm]{3.pdf} \includepdf[pages=-,scale=1.25,offset=-14mm -23mm]{4.pdf} \includepdf[pages=-,scale=1.25,offset=-14mm -23mm]{5.pdf} \includepdf[pages=-,scale=1.25,offset=-14mm -23mm]{6.pdf} \includepdf[pages=-,scale=1.25,offset=-14mm -23mm]{7.pdf} \end{document}\documentclass{article} \usepackage{pdfpages} \usepackage[a4paper,landscape]{geometry} \newcount\K \newcommand{\createPDF}{%  \K=0 \loop\ifnum\K&amp;lt;134 % while(K&amp;lt;pagecount)  \includepdf[pages=-,scale=1.15,offset=-12mm 2mm]{\the\K.png} \advance\K by 1 % K++  \repeat % end while } \begin{document} \createPDF \end{document} scaleオプションとoffsetオプションを指定してやると周囲の切り落としが可能となる。</description>
    </item>
    
    <item>
      <title>Wordの傍点を青空文庫形式に変換する方法</title>
      <link>https://qdaibungei.github.io/latex/documents/2017-03-19-bouten/</link>
      <pubDate>Sun, 19 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2017-03-19-bouten/</guid>
      <description>以下の画像を参考に置換する。
　置換用文字列は以下をコピペするとよい。
? ^&amp;amp;［＃「^&amp;amp;」に傍点］</description>
    </item>
    
    <item>
      <title>Wordのオートインデント機能を停止させる</title>
      <link>https://qdaibungei.github.io/latex/documents/2017-02-10-noautoindent/</link>
      <pubDate>Fri, 10 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2017-02-10-noautoindent/</guid>
      <description>はじめに Wordはおせっかい機能が多いことで有名である。中でも文芸サークルにおいて悪名高いのがオートインデント機能である。そこでここでは、このうざったいオートインデント機能が動作しないように設定する方法を記す。
手順 まず、赤丸で囲ったところをクリック。
　次に、オプションをクリック。
　オートコレクトのオプションをクリック。
　入力オートフォーマットタブの「行の始まりのスペースを字下げに変更する」のチェックボックスを外す。図は、チェックボックスを外した状態である。
追記：「Tab/Space/BackSpaceキーでインデントとタブの設定を変更する」のチェックも外す必要があるらしい、という情報をネットで得た。私の環境では初めから外れていた。
むすび オートインデント機能を切る方法は直感的に分かりづらい。Wordがそのような分かりづらい作りになっているのはなぜであろうか。まったく不可解である。もしかすると宇宙人の陰謀かもしれない。NASAなどが早急に原因究明にあたってくれることを強く望む。</description>
    </item>
    
    <item>
      <title>小説校正のための正規表現集</title>
      <link>https://qdaibungei.github.io/latex/documents/2016-10-09-kousei/</link>
      <pubDate>Sun, 09 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2016-10-09-kousei/</guid>
      <description>背景  小説集の編集をやっている。 インデントは全角空白で表現、ただし文頭が括弧の場合は空白不要、などの表記ルールを（明示はしていないが暗黙のうちに）定めている。  問題  著者たちはパソコンに熟達している人ばかりでなく、そのためインデント規則など表記ルールが守られていない原稿がよく送られてくる。  解法  以下のような正規表現を使って置換する。置換すべき項目がリストアップしてあると便利なので、以下に記しておく。上が検索文字列、下が置換後文字列。  インデントがないとき全角空白を挿入 ^([^　「『（〈【〔《［｛〝\n\\])
$1
括弧前に空白があれば削除 ^　([「『（〈【〔《［｛〝])
$1
文末の不要な空白を削除 [ ]+$

半角括弧→全角括弧 ((.+?))
（$1）
2連続で使用されている疑問符・感嘆符は半角に [！？]{2,}

単純なミスをあらかじめ検知 がが|のの|をを|にに|へへ|とと|でで|やや|かか|もも|はは
その他 青空文庫作業マニュアル【校正編】は参考になる。</description>
    </item>
    
  </channel>
</rss>