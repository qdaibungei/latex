<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Documents on 文藝部LaTeX研究会</title>
    <link>https://qdaibungei.github.io/latex/documents/</link>
    <description>Recent content in Documents on 文藝部LaTeX研究会</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Thu, 10 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://qdaibungei.github.io/latex/documents/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>混植支援フォント「Dal」</title>
      <link>https://qdaibungei.github.io/latex/documents/2022-02-10-dal-font/</link>
      <pubDate>Thu, 10 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2022-02-10-dal-font/</guid>
      <description>テキストエディタ用の混植支援フォントを作った。「Dal」と命名した。dash、arrow、leaderの頭文字を取って「Dal」である。
背景 VSCodeやAtomなどの最近のテキストエディタでは複数のフォントを指定することができる。欧文フォントを先に指定することにより、簡易的に、和文と欧文との混植を行なうことができる。
例えば、VSCodeのフォント設定を次のようにすると、IBM Plex Monoとヒラギノゴシックとの混植が可能だ。
&amp;#34;IBM Plex Mono&amp;#34;, &amp;#34;Hiragino Sans&amp;#34;, monospace しかしこのやり方には問題がある。和文フォントで表示してほしい文字種まで欧文フォントで表示されてしまうことがあるのだ。これにより、見栄えが悪くなる。特に見栄えを損ねるのは、ダーシ―と矢印←↓↑→と三点リーダ…である。
そこでダーシと矢印と三点リーダのみをグリフとして持つフォントを作成することにした。こうしたフォントを作るのは簡単である。
M+Web FONTS Subsetter 最も簡単には、M+Web FONTS Subsetterを利用し、「サブセット化する文字を入力」の欄に―‥…←↓↑→とだけ書いて「変換・ダウンロード」ボタンを押せばよい。
ただし、これだとあまりうまくいかない。M+フォントは、もともと矢印が半角になってしまっているので、矢印に関しては期待通りの結果が得られないのだ（三点リーダとダーシについてはうまくいくのだが）。
IBM Plex Sans JPのサブセット化 そこで、ダーシがきちんとつながり、三点リーダや矢印が半角でなく、かつフリーで使える和文フォントを探すことにする。幸い、そのようなフォントは存在する。その一つがIBM Plex Sans JPである。
fontforge でフォントのサブセットを生成するを参考にフォントを作る。
必要なソフトウェアのインストール まずFontForgeとpython3-fontforgeをインストールする。なおFontForgeはLinux環境で使うのが無難なようだ。
$ sudo apt install fontforge $ sudo apt install python3-fontforge Pythonスクリプトの使用 IBM Plex Sans JPをOTFからTTFに変換し、そののち、記事内にあるPythonスクリプトを利用してサブセット化する。コードポイントは次のように指定する。
codepoints = [(0x2015, 0x2015), (0x2025, 0x2026), (0x2190, 0x2193)] こうするとダーシ、三点リーダ、矢印のみからなるフォントができあがる。
Dalフォントの作成 このままではフォント情報がIBM Plex Sans JPのままなので、FontForgeをGUIで立ち上げてフォント情報を書き換える。フォントの名前は「Dal」とでもしておく。
フォントをOSにインストールすれば使えるようになる。
エディタでフォント設定 VSCodeなどの設定で「Dal」を先頭に書き加える。
&amp;#34;Dal&amp;#34;, &amp;#34;IBM Plex Mono&amp;#34;, &amp;#34;Hiragino Sans&amp;#34;, monospace これで三点リーダやダーシや矢印がきちんと全角で表示される。</description>
    </item>
    
    <item>
      <title>半角漢数字を出力するコマンド</title>
      <link>https://qdaibungei.github.io/latex/documents/2021-04-13-hankakukansuji/</link>
      <pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2021-04-13-hankakukansuji/</guid>
      <description>半角漢数字（正式名称ではないと思うが）は、少し昔の本の目次などで使われている。いまどきの本ではあまり見かけないが、かっこいいので私は好きである。
半角漢数字は、LaTeXだとotfパッケージの\CIDを用いれば簡単に出力できる。しかしCIDをいちいち調べないといけないのが面倒だ。そこで\hankakukansujiというコマンドを作ってみた。
次をhoge.texなどのファイル名で保存し、upLaTeXで実行する。
\documentclass[jafontsize=14Q, baselineskip=24.5H, line_length=45zw, number_of_lines=21, tate]{jlreq} \usepackage[uplatex]{otf}% \CIDを用いるため必須 \usepackage[noalphabet]{pxchfon} \setminchofont{HiraMinProN-W3.otf}% 半角漢数字が存在するフォントを選ぶ %% 半角漢数字出力コマンド \makeatletter \newcounter{qbcl@c@hk} \newcommand{\hankakukansuji}[1]{% \@tfor\@tempa:=#1\do{% \setcounter{qbcl@c@hk}{0}% \@whilenum\value{qbcl@c@hk}&amp;lt;10\do{% \ifnum\@tempa=\theqbcl@c@hk \addtocounter{qbcl@c@hk}{10185}\CID{\theqbcl@c@hk}\addtocounter{qbcl@c@hk}{-10185}% \fi \addtocounter{qbcl@c@hk}{1}% }% }% } \makeatother \begin{document} \hankakukansuji{764980} \end{document} すると次の結果を得る。</description>
    </item>
    
    <item>
      <title>LaTeXで本文領域にマス目を表示させる</title>
      <link>https://qdaibungei.github.io/latex/documents/2021-04-12-hanmen-grid/</link>
      <pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2021-04-12-hanmen-grid/</guid>
      <description>jlreq.clsで版面設計を行なうときでも、グリッド線（マス目）が表示できると都合がよい。この場合、hanmen.styのpassオプションを用いるとよい。
\documentclass[jafontsize=14Q, baselineskip=24.5H, line_length=45zw, number_of_lines=41]{jlreq} \usepackage[Q=14,H=24.5,W=45,L=41,g=45,pass]{hanmen} \usepackage{bxjalipsum} \begin{document} \jalipsum[4-6]{wagahai} \end{document} こうすると、次の結果を得る。
確かにグリッド線がうまく表示されている。ただし現状、縦書き時にはグリッド線が少しずれて表示されてしまう。後日修正したい。</description>
    </item>
    
    <item>
      <title>ベスト文集制作記録⑪（入稿）</title>
      <link>https://qdaibungei.github.io/latex/documents/2020-04-13-latexnovel/</link>
      <pubDate>Mon, 13 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2020-04-13-latexnovel/</guid>
      <description>最後に、印刷所に入稿する際の注意事項を述べる。
入稿時の注意事項 紙の種類 入稿するとき、本文に使用する紙の種類が選べる。このとき重要なのは、書籍用紙やクリームキンマリなどのほんのり茶色がかった色の紙を選ぶことだ。いくら値段が安いからといって、上質紙（真っ白な色をした紙）を選んではならない。
市販の文庫本や単行本を見よ。コピー用紙のように真っ白な紙は、普通、使われていないのである。書籍用紙やクリームキンマリなど、長文を読むのに適した紙を選ぶことが何より大事である。
断ち切り 印刷用語に「断ち切り」というのがある。知らない人は、ポプルスのサイト内の記事「■綺麗な本にするためには「断ち切り」が大事？」などを参照のこと。
この断ち切りに関連して、二つの注意事項がある。
表紙担当に断ち切りのことを伝えよ 表紙担当が断ち切りのことを把握しているとは限らない。むしろ、把握していないことのほうが多い。表紙作成を依頼する際には、担当者にしっかりと断ち切りのことを伝えること。例えば、A5サイズの本を作るときには、表紙はA5よりも一回り大きなサイズ（上下左右にプラス3mmほど）で作ってもらおう。
また、表紙に文字を入れたいときもあるだろう。このとき文字が表紙の端っこすぎると文字が切れてしまうことがあるので、少し内側に寄せるほうが安全である。このことも表紙担当には伝えておきたい。
本文の断ち切りを作るのを忘れぬように 普通のレイアウトでは本文には断ち切りは要らない。しかし、紙の端まで印刷したい場合は、本文データにも断ち切り部分を作る必要がある。今回のベスト文集も、断ち切りが必要なデザインであった。
私の場合、「断ち切りを作るべし」ということ自体は覚えていても、編集時にはレイアウト確認のため断ち切りなしバージョンで作業していることが多く、その結果、入稿時にも間違えて断ち切りなしバージョンでデータ送信してしまうことがある。入稿時には断ち切りを作るのを忘れぬよう注意したい。
よくある凡ミス よくある凡ミスを列挙しておこう。これらは、入稿前にいま一度チェックしておきたい。
他人のペンネームを間違える（特にその人が複数のペンネームを持っている場合） 目次で作品タイトルを間違える 柱で作品タイトルを間違える 奥付の情報を間違える（特に年月日） このなかでも近年文藝部内で目立つのが、「柱で作品タイトルを間違える」ミスである1。私はLaTeXを用いているのでこの類のミスはしたことがないのだが、Wordで編集している場合、このミスが多発する。気をつけよう。
跋 以上、ベスト文集制作の主に技術的な側面を記述してきた。次期ベスト文集の編集人の健闘を祈る。
「柱」というのは何かというと、本には普通、各ページに小さく作品タイトルや章タイトルが書いてあると思うが、その小さく書かれたタイトルのことである。&amp;#160;&amp;#x21a9;&amp;#xfe0e;</description>
    </item>
    
    <item>
      <title>ベスト文集制作記録⑩（奥付）</title>
      <link>https://qdaibungei.github.io/latex/documents/2020-04-12-latexnovel/</link>
      <pubDate>Sun, 12 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2020-04-12-latexnovel/</guid>
      <description>奥付 奥付は次のようなデザインにした1。奥付でもやはり書籍タイトルに廻想体を使い、統一感を出した。
LaTeXでは次のように実現してある。
%% macro for colophon \makeatletter \def\@thisdate#1/#2/#3/#4\@nil{% \newcommand{\thisyear}{#1}% \newcommand{\thismonth}{#2}% \newcommand{\thisday}{#3}% } \def\thisdate#1{\expandafter\@thisdate#1//\@nil} \newcommand{\bookmaker}[2]{% ■\leavevmode\hbox to 2.7zw{% {\gtfamily\bfseries\fontsizeX #1}% }% ―\kern-.7zw\――#2% } \newcommand{\fontcredit}[2]{% \leavevmode\hbox to 6zw{% \hfill\emph{#1}% }% {\kern1.5zw\okfamily #2}% } \makeatother %% colophon \newhanmen{Q=11.5,H=19,W=58,L=21,ko=2mm,koguchi=\relax,nodo=\relax,chi=16.4375mm,tate} % \pagegridon{g=56} \thispagestyle{empty} \columnsep=4zw \begin{multicols*}{2} \parbox&amp;lt;y&amp;gt;[c]{\textheight}{% \fontcredit{組版処理}{\LaTeXe}\\ \fontcredit{使用書体}{}{\raise-.125zw\hbox{\gtfamily\ebseries\fontsize{14\bQ}{19H}\selectfont \kern-.1zw 廻\kern-.25zw 想\kern-.25zw 体}＋{\agencyfb Agency FB}\fontsizeVIII 〈表紙〉}\\ \fontcredit{}{\raise-.125zw\hbox{\gtfamily\ebseries\fontsize{14\bQ}{19H}\selectfont \kern-.1zw 廻\kern-.25zw 想\kern-.25zw 体}＋{\classico Classico}\fontsizeVIII 〈ロゴ〉}\\ \fontcredit{}{{\mcfamily 游明朝体R＋Cochineal}\fontsizeVIII 〈本文・ルビ・柱〉}\\ \fontcredit{}{游明朝体五号かなR＋fbb\fontsizeVIII 〈本文〉}\\ \fontcredit{}{{\mgfamily 筑紫Aオールド明朝R}＋fbb\fontsizeVIII 〈各作品タイトル〉}\\ \fontcredit{}{{\gtfamily 游ゴシック体M}＋\textgt{Open Sans Regular}\fontsizeVIII 〈見出し・作品情報〉}\\ \fontcredit{}{\emph{筑紫ゴシックD}＋\emph{Open Sans Semibold}\fontsizeVIII 〈強調・小見出し〉}\\ \fontcredit{}{\texttt{Nimbus15 Mono Narrow}\fontsizeVIII 〈作品情報〉}\\ \fontcredit{}{源暎ノンブル\fontsizeVIII 〈ノンブル〉} } \columnbreak \thisdate{2019/10/04} \leftskip=-6zw \okfamily \vspace*{.</description>
    </item>
    
    <item>
      <title>ベスト文集制作記録⑨（著者コメント欄）</title>
      <link>https://qdaibungei.github.io/latex/documents/2020-04-11-latexnovel/</link>
      <pubDate>Sat, 11 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2020-04-11-latexnovel/</guid>
      <description>著者コメント欄 ベスト文集の終わりのほうに、著者コメント欄を設けた。
版面設定は次のようにした。見開きに収めたかったので、文字サイズは10.5Qとかなり小さめ。
\newhanmen{Q=10.5,H=15.75,W=66.5,L=29,tate,ko=0mm,te=0mm,nodo=\relax,koguchi=14.625mm,chi=16.4375mm,footskip=3.25mm} 「著者コメント」とあるタイトル部分は、次のコードにより出力した。
\fboxsep=.25zw \definecolor{creditgray}{gray}{0.1} \colorbox{creditgray}{\emph{\color{white}~著者コメント}}{\color{creditgray}\rule[-.75zw]{59.75zw}{1.5zw}} （次回に続く）</description>
    </item>
    
    <item>
      <title>ベスト文集制作記録⑧（本文の組み方⑤・作品タイトル篇）</title>
      <link>https://qdaibungei.github.io/latex/documents/2020-04-10-latexnovel/</link>
      <pubDate>Fri, 10 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2020-04-10-latexnovel/</guid>
      <description>本文の組み方⑤・作品タイトル篇 デザイン 作品タイトルは以下のようなデザインとした。紙面を節約するために、タイトルを本文の右隣りに置くデザインとした。
LaTeXによる章の作り方（通常時） 普通、LaTeXで作品タイトルや章タイトルを出力するには、\chapterという命令を使う。\chapter{作品タイトル}のようにすればよい。
しかし今回は、\chapterに代替しうるマクロを独自に定義してこれを使った。なぜかというと、\chapterの定義を変更してデザインを変えるのが面倒であったからだ。LaTeXにもう少し詳しければ\chapterを再定義して用いたほうがよいであろう。
LaTeXによる章の作り方（私家版） 上のような作品タイトルの出力をLaTeXで実現するために、次のようなマクロを組んだ。
%% title &amp;amp; author names \newcommand{\booktitlename}{\relax} \newcommand{\chaptertitle}[1]{\def\qbook@chaptertitle{#1}} \newcommand{\chapterauthor}[1]{\def\qbook@chapterauthor{#1}} \newcommand{\chapterauthorruby}[1]{\def\qbook@chapterauthorruby{#1}} \newcommand{\chapterfirstappearance}[1]{\expandafter\qbook@fa#1//\@nil} \def\qbook@fa#1/#2/#3/#4\@nil{% \def\qbook@fa@year{#1}% \def\qbook@fa@gou{#2}% \def\qbook@fa@booktitle{#3}% } \chaptertitle{\relax} \chapterauthor{\relax} \chapterauthorruby{\relax} \chapterfirstappearance{\relax/\relax/\relax} %% \makechapter % \let\qbook@orig@tcy=\tcy \def\qbook@5gyobox#1{\leavevmode\hbox to 5\baselineskip{\yoko#1\hfill}} \def\qbook@makechapter{% \begingroup \ifnum\value{dangumi}=1 \hspace*{-4.5zw}% \fi \qbook@5gyobox{\rule{70mm}{.4mm}} \qbook@5gyobox{\fontsize{12\bQ}{12H}\agencyfb The BEST SELECTION of\phantom{y}}\kern.05em \qbook@5gyobox{\fontsize{12\bQ}{12H}\agencyfb Kyushu University}\kern.05em \qbook@5gyobox{\fontsize{12\bQ}{12H}\agencyfb Literary Club}\kern.05em \qbook@5gyobox{\fontsize{12\bQ}{12H}\agencyfb Works} \qbook@5gyobox{\rule{70mm}{.4mm}} \begingroup \kanjiskip=-2H plus 0zw minus 0zw {\hskip2zw\fontsize{35\bQ}{35H}\selectfont\parbox{16zw}{\mgfamily\romanfamily{fbb-TLF}\selectfont\qbook@chaptertitle}}\par \endgroup \vspace{-.08\baselineskip} \hfill\leavevmode\hbox to 0pt{\yoko{\fontsize{8\bQ}{8H}\ttfamily Author:\phantom{y}}\hfill}\kern.2mm \leavevmode\hbox to 0pt{\yoko\rule{70mm}{.125mm}}\kern1mm \leavevmode\hbox to 0pt{\yoko\textgt{\fontsize{10\bQ}{10H}\selectfont\qbook@chapterauthor}\hfill} \leavevmode\hbox to 0pt{\yoko\textgt{% \fontsize{7\bQ}{7H}\selectfont \expandafter\ifx\qbook@chapterauthorruby\relax \else （\qbook@chapterauthorruby）\fi}\hfill }\kern2.</description>
    </item>
    
    <item>
      <title>ベスト文集制作記録⑦（本文の組み方④・テキストからTeXへ変換する篇）</title>
      <link>https://qdaibungei.github.io/latex/documents/2020-04-09-latexnovel/</link>
      <pubDate>Thu, 09 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2020-04-09-latexnovel/</guid>
      <description>本文の組み方④・テキストからTeXへ変換する篇 ダッシュ 倍角ダッシュや波ダッシュは、jdash.styを用いてマクロ定義してある。このマクロを使うため、次のように置換処理を行なう。
jdashes = [&amp;#39;—&amp;#39;,&amp;#39;―&amp;#39;,&amp;#39;─&amp;#39;] wdashes = [&amp;#39;〜&amp;#39;,&amp;#39;～&amp;#39;] def jdash_replace(x): for jdash in jdashes: if x.find(jdash) &amp;gt; -1: for y in range(30,2,-1): x = x.replace(jdash*y,&amp;#39;{\\jdash[&amp;#39;+str(y)+&amp;#39;]&amp;#39;+&amp;#39;}&amp;#39;) x = x.replace(jdash*2,&amp;#39;\\――&amp;#39;) return x def wdash_replace(x): for wdash in wdashes: if x.find(wdash) &amp;gt; -1: for y in range(20,1,-1): x = re.sub(wdash*y,(&amp;#39;\\&amp;#39;+wdash)*y,x) return x 濁点マクロ 例えば、平仮名の「な」に濁点を打ちたくなることがある。このような場合には濁点マクロを作っておくと便利だ。
LaTeXでのマクロ定義 %% dakutens \newcommand{\dakuten}[1]{% \jghostguarded{% \leavevmode\hbox to 1zw{% \rensuji{\hbox to 1zw{#1\hspace*{-0.25zw}゛}}% }% }% } \newcommand{\handakuten}[1]{% \jghostguarded{% \leavevmode\hbox to 1zw{% \rensuji{\hbox to 1zw{#1\hspace*{-0.</description>
    </item>
    
    <item>
      <title>ベスト文集制作記録⑥（本文の組み方③・ベタ組篇）</title>
      <link>https://qdaibungei.github.io/latex/documents/2020-04-08-latexnovel/</link>
      <pubDate>Wed, 08 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2020-04-08-latexnovel/</guid>
      <description>本文の組み方③・ベタ組篇 小説の本文は、ベタ組にするのがよい。ベタ組とは、方眼紙に字を埋めるがごとく、字間を空けずに組むことである。次の画像のように組むということである。
hanmen.styの使用 LaTeXの標準機能でベタ組を実現するのは案外難しい。そこで、hanmen.styを使用する。これを用いると、ベタ組を実現しやすい。
ベタ組のための基本設定 次の設定をしておくと字間や行間が広がりにくく、ベタ組を実現しやすい。
%% 字間・行間の設定 \kanjiskip=0zw plus .25zw minus .03125zw \xkanjiskip=.25zw plus .25zw minus .0625zw \parskip=0zw \parsep=0zw \partopsep=0zw 縦中横 LaTeXで縦書きをする際、縦中横には\rensujiを使うよう言われる。しかし\rensujiだと無駄に\xkanjiskipが挿入されてしまい、ベタ組にならない。そこで\tcy命令を新たに作り、これを使うのがよい。
\usepackage{pxghost} %% \tcy \newcommand{\tcy}[1]{% \jghostguarded{% \leavevmode\hbox to 1zw{% \centering\rensuji*{#1}% }% }% } 数字やアルファベットを自動で縦中横にするために、『九大文学』製作時にはPythonで次の関数を作って置換した。
nums = [ [&amp;#39;０&amp;#39;,&amp;#39;0&amp;#39;],[&amp;#39;１&amp;#39;,&amp;#39;1&amp;#39;],[&amp;#39;２&amp;#39;,&amp;#39;2&amp;#39;],[&amp;#39;３&amp;#39;,&amp;#39;3&amp;#39;],[&amp;#39;４&amp;#39;,&amp;#39;4&amp;#39;], [&amp;#39;５&amp;#39;,&amp;#39;5&amp;#39;],[&amp;#39;６&amp;#39;,&amp;#39;6&amp;#39;],[&amp;#39;７&amp;#39;,&amp;#39;7&amp;#39;],[&amp;#39;８&amp;#39;,&amp;#39;8&amp;#39;],[&amp;#39;９&amp;#39;,&amp;#39;9&amp;#39;] ] alphabets = [ [&amp;#39;Ａ&amp;#39;,&amp;#39;A&amp;#39;],[&amp;#39;Ｂ&amp;#39;,&amp;#39;B&amp;#39;],[&amp;#39;Ｃ&amp;#39;,&amp;#39;C&amp;#39;],[&amp;#39;Ｄ&amp;#39;,&amp;#39;D&amp;#39;],[&amp;#39;Ｅ&amp;#39;,&amp;#39;E&amp;#39;], [&amp;#39;Ｆ&amp;#39;,&amp;#39;F&amp;#39;],[&amp;#39;Ｇ&amp;#39;,&amp;#39;G&amp;#39;],[&amp;#39;Ｈ&amp;#39;,&amp;#39;H&amp;#39;],[&amp;#39;Ｉ&amp;#39;,&amp;#39;I&amp;#39;],[&amp;#39;Ｊ&amp;#39;,&amp;#39;J&amp;#39;], [&amp;#39;Ｋ&amp;#39;,&amp;#39;K&amp;#39;],[&amp;#39;Ｌ&amp;#39;,&amp;#39;L&amp;#39;],[&amp;#39;Ｍ&amp;#39;,&amp;#39;M&amp;#39;],[&amp;#39;Ｎ&amp;#39;,&amp;#39;N&amp;#39;],[&amp;#39;Ｏ&amp;#39;,&amp;#39;O&amp;#39;], [&amp;#39;Ｐ&amp;#39;,&amp;#39;P&amp;#39;],[&amp;#39;Ｑ&amp;#39;,&amp;#39;Q&amp;#39;],[&amp;#39;Ｒ&amp;#39;,&amp;#39;R&amp;#39;],[&amp;#39;Ｓ&amp;#39;,&amp;#39;S&amp;#39;],[&amp;#39;Ｔ&amp;#39;,&amp;#39;T&amp;#39;], [&amp;#39;Ｕ&amp;#39;,&amp;#39;U&amp;#39;],[&amp;#39;Ｖ&amp;#39;,&amp;#39;V&amp;#39;],[&amp;#39;Ｗ&amp;#39;,&amp;#39;W&amp;#39;],[&amp;#39;Ｘ&amp;#39;,&amp;#39;X&amp;#39;],[&amp;#39;Ｙ&amp;#39;,&amp;#39;Y&amp;#39;], [&amp;#39;Ｚ&amp;#39;,&amp;#39;Z&amp;#39;], [&amp;#39;ａ&amp;#39;,&amp;#39;a&amp;#39;],[&amp;#39;ｂ&amp;#39;,&amp;#39;b&amp;#39;],[&amp;#39;ｃ&amp;#39;,&amp;#39;c&amp;#39;],[&amp;#39;ｄ&amp;#39;,&amp;#39;d&amp;#39;],[&amp;#39;ｅ&amp;#39;,&amp;#39;e&amp;#39;], [&amp;#39;ｆ&amp;#39;,&amp;#39;f&amp;#39;],[&amp;#39;ｇ&amp;#39;,&amp;#39;g&amp;#39;],[&amp;#39;ｈ&amp;#39;,&amp;#39;h&amp;#39;],[&amp;#39;ｉ&amp;#39;,&amp;#39;i&amp;#39;],[&amp;#39;ｊ&amp;#39;,&amp;#39;j&amp;#39;], [&amp;#39;ｋ&amp;#39;,&amp;#39;k&amp;#39;],[&amp;#39;ｌ&amp;#39;,&amp;#39;l&amp;#39;],[&amp;#39;ｍ&amp;#39;,&amp;#39;m&amp;#39;],[&amp;#39;ｎ&amp;#39;,&amp;#39;n&amp;#39;],[&amp;#39;ｏ&amp;#39;,&amp;#39;o&amp;#39;], [&amp;#39;ｐ&amp;#39;,&amp;#39;p&amp;#39;],[&amp;#39;ｑ&amp;#39;,&amp;#39;q&amp;#39;],[&amp;#39;ｒ&amp;#39;,&amp;#39;r&amp;#39;],[&amp;#39;ｓ&amp;#39;,&amp;#39;s&amp;#39;],[&amp;#39;ｔ&amp;#39;,&amp;#39;t&amp;#39;], [&amp;#39;ｕ&amp;#39;,&amp;#39;u&amp;#39;],[&amp;#39;ｖ&amp;#39;,&amp;#39;v&amp;#39;],[&amp;#39;ｗ&amp;#39;,&amp;#39;w&amp;#39;],[&amp;#39;ｘ&amp;#39;,&amp;#39;x&amp;#39;],[&amp;#39;ｙ&amp;#39;,&amp;#39;y&amp;#39;], [&amp;#39;ｚ&amp;#39;,&amp;#39;z&amp;#39;] ] def alphabet_replace(s): for x in alphabets: s = s.replace(x[0],&amp;#39;\\tcy{&amp;#39;+x[1]+&amp;#39;}&amp;#39;) return s def num_replace(s): for x in nums: s = s.</description>
    </item>
    
    <item>
      <title>ベスト文集制作記録⑤（本文の組み方②・版面設計篇）</title>
      <link>https://qdaibungei.github.io/latex/documents/2020-04-07-latexnovel/</link>
      <pubDate>Tue, 07 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2020-04-07-latexnovel/</guid>
      <description>本文の組み方②・版面設計篇 各種パラメータ 紙サイズ 今回はA5サイズを使用した。A5サイズは、文庫サイズなどに比べて安く作れるので、同人誌界隈ではよく使用される。文藝部にはそこまでお金がないので、今回もA5サイズ以外に選択の余地はなかった。
文字サイズ 『九大文学』では、文字サイズは13Qとした1。13Qくらいが、大きすぎず小さすぎず、ちょうどよい塩梅ではあるまいか。
初心者は文字サイズを小さくして失敗してしまいがちなので、注意すること。印刷所に入稿する前に、家庭用プリンターで本文を印刷してみて、どれくらいの文字サイズになっているかを確認するのが最も安全である。
行送り 行送りは、19.5Hとした。これは、文字サイズの1.5倍である（それゆえ行間は文字サイズの0.5倍である）。これは、行間の設定としてはかなり狭めである。一般には、行送りは文字サイズの1.5〜2倍程度がよいとされている。
なお、フォントによって、行送りを広く取ったほうがよいもの、狭くても読みやすいものがある。したがって行送りはフォントを選んだ後に決めるべきであろう。今回は游明朝だから行送りを狭めにしたが、例えばヒラギノ明朝であればもう少し広めに取ったほうがよい。
行長・行数 行長は26字、行数は24行とした。二段組とし、段間は2.5字分とした。
ノド ノド側の余白を狭くしすぎると、文字が食われてしまって読みづらい。A5で縦書きの場合、ノドの広さは約20mmは欲しい2。今回は、ノドは18mm取った。
LaTeXでの実現方法 まとめると、版面は次のような設定にしたことになる。
紙はA5サイズ 文字サイズ13Q 行送り19.5H 26字×24行×2段組 段間2.5字分 ノドの広さは18mm これは、「頁数節約のため一頁あたりの文字数を多めにしつつ、最大限、可読性も確保する」というコンセプトのもとで、幾度も調整を重ねて設計したものである。
具体的には次のように記述してLaTeXで実現している（細かい解説は面倒なので割愛）。
%% ドキュメントクラス読み込み時にA5サイズ指定 \documentclass[a5paper,autodetect-engine]{jsbook} \usepackage[tate]{hanmen} %% papersize \AtBeginDvi{\special{papersize=\the\paperwidth,\the\paperheight}}% 通常 % 本文に上下左右3mmの塗り足しを作る細工 % \newdimen\stockwidth % \newdimen\stockheight % \setlength{\stockwidth}{\paperwidth} % \setlength{\stockheight}{\paperheight} % \advance\stockwidth by 6mm % \advance\stockheight by 6mm % \advance\voffset by 3mm % \advance\hoffset by 3mm % \AtBeginDvi{\special{papersize=\the\stockwidth,\the\stockheight}} %% layout \newcounter{dangumi} \setcounter{dangumi}{0} \newcommand{\newhanmenI}{% % H = ((19.5/4)*(24-1)/(22-1))*4 % TBmargin: (210-((13/4)*50))/2=23.</description>
    </item>
    
    <item>
      <title>ベスト文集制作記録④（本文の組み方①・フォント篇）</title>
      <link>https://qdaibungei.github.io/latex/documents/2020-04-06-latexnovel/</link>
      <pubDate>Mon, 06 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2020-04-06-latexnovel/</guid>
      <description>ここからは小説誌の血肉とも言うべき本文の組み方について述べる。
本文の組み方①・フォント篇 まずはフォントの選定である。フォントは小説向きのものを選ぶこと、これが鉄則である。小説向きのフォントとは、例えば次のようなフォントを言う。
游明朝 ヒラギノ明朝 しっぽり明朝v2 源暎こぶり明朝 筑紫明朝 以下、各々のフォントについて簡単に解説する。
游明朝 游明朝は最も小説向きであると言えよう。癖がなく、上品で、読みやすい。しかも公式サイトには次のように書いてあり、小説用に開発されたフォントであることが明言されている。
游明朝体ファミリーは「時代小説が組めるような明朝体」をキーワードに、単行本や文庫などで小説を組むことを目的に開発した游明朝体Rを核とした明朝体ファミリーです。
游明朝は現在、WindowsおよびMacに標準で付属しているので、誰でも簡単に使用可能である。よい時代になったものである。しかし逆に言うと、最近は小説同人誌でよく見かけるフォントとなってきており、個性を発揮して他との差別化を図りたい向きには物足りないかもしれない。
ヒラギノ明朝 ヒラギノ明朝は、Macについてくる美しいフォントである。ファンも多く、ヒラギノ目当てでMacを買う人がいるほどである（「ヒラギノを買ったらMacがついてきた」という言い方が定番ネタとなっている）。
ただしMacについてくるヒラギノ明朝はウェイトがW3であり、小説本文に使うにはやや太くかつ平仮名がやや大きめである。W3よりも細めのW2であれば、平仮名がやや小さく設計されているのでより小説に向いていると言えるであろう1。ただし、W2はMacに付属していないので別途購入の必要がある。
しっぽり明朝v2 しっぽり明朝v2はフリーフォントながら綺麗なフォントであり、小説に向いている（もっとも私自身は使ったことがないので使用感はよく分からない）。公式サイトには次のような説明がある。
しっぽり明朝は、石井中明朝体OKLやリュウミンKO、A1明朝、筑紫Aオールド明朝等に影響を与えた、東京築地活版製造所の名作書体である五号系活字を下敷きに、物静かで上品で、見ているだけでうっとりするような明朝体を目指して制作した、オールドスタイル明朝体フリーフォントです。
五号系活字が好きな人にはおすすめのフリーフォントである。
源暎こぶり明朝 源暎こぶり明朝もまたフリーフォントながら綺麗なフォントであり、小説に向いている（もっとも私自身は使ったことがないので使用感はよく分からない）。公式サイトには次のように書かれてあり、小説向きであることが明言されている。
「源暎こぶり明朝」は小説創作活動や電子書籍閲覧など縦組み・長文・文芸向けをターゲットに製作された本文用明朝体です。
ヒラギノ明朝にも近しい印象のフォントで、小説同人誌ではMS明朝・游明朝に並んでよく見かける気がする。
筑紫明朝 筑紫明朝は有料フォントであるから、気軽に使うわけにはゆかない。しかし非常に美しいフォントであり、小説本文用としてぜひとも候補に入れておきたい。LETSの学生割か、もしくはmojimo-kireiというパックで契約すると、比較的安い年間価格で使用することができる。
小説向きのフォントのなかで比較的安い有料フォントとしては、他にもイワタ明朝体オールドのTrueType版がある。また、一太郎のプレミアム版を買うとフォントがついてくる（フォントを単体で買うよりも一太郎ごと買ったほうが安いので、実質「フォントを買ったら一太郎がついてくる」状態である）ので、フォントにこだわる向きは検討してみるとよい。
小説向きではないフォント 最後に、小説向きではないフォントを紹介する。例えば以下のようなフォントは小説で使わないのが無難である。
創英角ポップ体 MS明朝 小塚明朝 ほのか明朝 はれのそら明朝 創英角ポップ体やMS明朝は言うまでもなく、ほのか明朝やはれのそら明朝も小説には向いていない2。
最も確実にフォントを選ぶには、フォントの公式サイトに行って、そのフォントがいかなる用途を想定して作られたかを確認するのがよい。こうすれば、フォントのセンスに自信がなくても、小説向きかどうかをある程度見極めることができよう。
九大文学では 今回、『九大文学』では基本的に游明朝を採用した。ただし本文の一部には游明朝体五号かなを使用し、小さなアクセントとした。
欧文は、游明朝にはCochinealを、游明朝体五号かなにはfbbを合わせた。游明朝とCochinealの組み合わせは相性がよいので試されるとよいであろう。
（次回に続く）
W3とW2の違いについては、亮月製作所＊書体のはなし・ヒラギノ明朝体を参考にした。&amp;#160;&amp;#x21a9;&amp;#xfe0e;
なぜわざわざ、ほのか明朝とはれのそら明朝を取り上げたのかというと、最近の文藝部の部誌に使われていたからである。今時の後輩たちは市販の小説本を読んだことがないのか……？　と思わせるほど、小説っぽくないフォント選定であった。いや、フォントを工夫すること自体はありがたいことなんですけどね。というかこんなところで批判的なことを言わずに直接言えよという声が聞こえてきそう。すみません直接言う勇気はありませんでした。後輩たちが楽しく活動できているならそれでいいんです。&amp;#160;&amp;#x21a9;&amp;#xfe0e;</description>
    </item>
    
    <item>
      <title>ベスト文集制作記録③（目次）</title>
      <link>https://qdaibungei.github.io/latex/documents/2019-10-14-latexnovel/</link>
      <pubDate>Mon, 14 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2019-10-14-latexnovel/</guid>
      <description>前回に引き続き、小説組版の方法を解説していく。今回は、「目次」の作り方である。
目次 目次のデザイン 今回のベスト文集では、目次は下図のようなデザインにした。このデザインは、某小説誌を参考に作った。
ノンブル1のフォントには、源暎ノンブルを使った。たったこれだけの工夫でかなりデザインが引き締まる気がする。
目次のデザイン（見開き版） 見開きで見ると、目次はこんな感じ。目次ページの始まりを示す中扉には、「九大文学＊目次」と書いた。この「九大文学」のフォントは、扉ページと同じく廻想体にしてある。逐一フォントを揃えていくことで本全体に統一感を出すためである。
「九大文学」という文字だけのページ（最後の画像の左側）は、本文の始まりを明示するための中扉。
LaTeXによる目次の作り方（通常時） 通常、LaTeXで目次を生成するには、\tableofcontentsという命令を使うことになっている。
しかし、\tableofcontentsで上のような目次を作るのは結構難しい。なぜならば、第一に、デフォルトの\tableofcontentsでは、著者名と作品名をどちらも出力するということができないからだ（そもそもLaTeXのデフォルトの設定では、複数の著者名を扱うような仕組みがない）。
第二に、\tableofcontentsで出力される目次のレイアウトを変更するのが難しい。\tableofcontentsを再定義してやればいいのだが、\tableofcontentsの元の定義はかなり複雑で、変更が面倒である。
LaTeXによる目次の作り方（私家版） さてそこで私は、\tableofcontentsに代替しうるマクロを別途定義して使っている。そのマクロとは、以下に示すような\Mokujiマクロである。
%% \Mokuji \newcommand{\Mokuji}[3]{% #1\hskip1zw% 作品名 \textgt{#2}\hskip1zw% 著者名 \rensuji{\pageref{#3}}% ページ数 } このようなマクロを作っておいたうえで、本文内に次のように記述する。
\Mokuji{走れメロス}{太宰治}{dazai}% 目次生成。引数は、\Mokuji{&amp;lt;作品名&amp;gt;}{&amp;lt;著者名&amp;gt;}{&amp;lt;ページ参照用ラベル&amp;gt;}とする。 % \label{dazai}% 小説開始時点にラベルを張っておく % 以下、小説本文 すると、次のように出力される。
基本的には、このように\Mokujiマクロを何個も使って目次を作ればよい。目次デザインを変えるためには、\Mokujiマクロの定義を適宜変更すればよい。
ベスト文集では、\mokujiを次のように定義して使った。
%% \mokuji \newcommand{\mokuji}[4]{% \expandafter\ifx#4\relax \leavevmode\hbox to 14zw{}% \else \leavevmode\hbox to 14zw{\rule[-1zw]{.4pt}{2zw}\kern.5zw\fontsize{12\bQ}{\baselineskip}\selectfont #4\hss}% \fi \expandafter\ifx#2\relax \else \leavevmode\hbox to 6zw{% \hss\textgt{\fontsize{12\bQ}{\baselineskip}\selectfont #2}% }% \fi \kern.5zw\rule[-1zw]{.4pt}{2zw}\kern.5zw #1 \def\qbook@mkj@page{\pageref{#3}}% \expandafter\ifx\csname r@#3\endcsname\relax \def\qbook@mkj@page{??}% \fi \StrLeft{\qbook@mkj@page}{1}[\qbook@mkj@firstchar]% \if ?\qbook@mkj@firstchar \hfill\rule[-1zw]{.4pt}{2zw}\kern.5zw\hbox to 1.5zw{\tcy{?}}% \else \if i\qbook@mkj@firstchar \tcy{\small\qbook@mkj@page}\hspace*{-.</description>
    </item>
    
    <item>
      <title>ベスト文集制作記録②（扉）</title>
      <link>https://qdaibungei.github.io/latex/documents/2019-10-13-latexnovel/</link>
      <pubDate>Sun, 13 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2019-10-13-latexnovel/</guid>
      <description>前回に引き続き、小説組版の方法を解説していく。今回は、扉ページの作り方である。
扉 扉とは 「扉」とは、表紙をめくって最初にあるページのことである。書籍の題名などを書くページである。今回のベスト文集では、次のような扉を作った。
我ながらシンプルでかっこいい扉である。「九大文学」という文字のフォントは、背表紙に使ったのと同じフォント（廻想体）を使っている。これにより統一感が出て、本全体のデザインのまとまりがよくなったはずである。
ロゴ 扉の左下には、九大文藝部のロゴを配置してある。
このロゴは、かなり昔にデザインされ、部誌で使用されていたものである。一時期このロゴはまったく使用されなくなっていたが、私が再び使い始めた。
今回のベスト文集におけるロゴは、以前のロゴとは少しだけデザインが異なっている。欧文フォントは、以前のロゴとまったく同じもの（Classico）を使用している。だが和文フォントは、本全体の雰囲気に合わせて「廻想体」を選択した（以前のロゴではヒラギノ明朝が使われていた）。
文藝部の遺伝子は、少しずつアップデートされながらも、着実に継承されていく。
LaTeXによる扉の作り方 LaTeXで扉を作るには通常、\title{九大文学}のように本のタイトルを指定し、\maketitleという命令を書き込むことによって扉を生成する。しかしこの方法では、扉ページのレイアウトを変更するのが非常に難しい。具体的には、クラスファイルを編集して\maketitleという命令を定義し直せばよいと思われるが、この方法は余程TeXに習熟している人でない限り実行困難であろう。今回作ったベスト文集のように、扉だけ横書きで、本文は縦書き、といったような複雑なレイアウトにする場合は、特に面倒だと思われる。
そこで、扉を作るにあたっては、実現したいレイアウトを直接LaTeXの文法に従って書くほうが無難である。具体的には、私は以下のように記述して扉を作った（ただし、以下の記述のなかには独自に定義したマクロも多く含まれているので、これをそのままコピペしてもエラーが出るだけである。注意されたい）。
\newhanmenII \newhanmen{tate,te=-2mm} \hanmenchangedir \thispagestyle{empty} \begingroup \vspace*{70mm} {\fontsize{30\bQ}{30H}\gtfamily\ebseries\romanfamily{agencyfb}\romanseries{bx}\selectfont\booktitlename} \leftskip-1zw \vspace{\fill} \parbox{9zw}{% \begin{center} \fontsize{15\bQ}{16H}\classico \hspace*{0.18em}Kyushu \hspace{0.05em}Univ.\\ \vspace{-.2em}% \mbox{}\hspace{-1.3zw}{\gtfamily\ebseries\fontsizeX 九州大学文藝部}\\ \vspace{-.1em}% Literary Club \end{center} } \endgroup 何をやっているかというと、基本的には、「文字の大きさやフォントを切り替えつつ、\vspaceや\hspaceで文字の位置を調整して配置している」ということになる。すなわちWordなどと同じ要領でデザインすればよい。
文字の大きさは、
\fontsize{20Q}{25H}\selectfont のように書けば指定できる。また、フォントの指定をするには
\kanjifamily{hmc}\romanfamily{qag}\selectfont のように書けばよい。フォント指定のマクロには\fontfamilyという命令もあるが、ここでは敢えて\fontfamilyではなく\kanjifamilyと\romanfamilyを使っている。こちらの命令を使えば、和文と欧文でまったく違うフォントを指定することが可能となるので、便利である。
（次回に続く）</description>
    </item>
    
    <item>
      <title>ベスト文集制作記録①（表紙）</title>
      <link>https://qdaibungei.github.io/latex/documents/2019-10-12-latexnovel/</link>
      <pubDate>Sat, 12 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2019-10-12-latexnovel/</guid>
      <description>序 概要 この記事は、ベスト文集の制作記録である。それと同時に、LaTeXで小説同人誌を作る方法の解説記事をも兼ねている。以前、初級編を執筆したときに、「中級編をいずれ書くつもりだ」と言いながら、ずっと書くのをサボり続けてきた。そこで今回、中級編を書き起こすことにしたのであった。
ベスト文集とは 九大文藝部では、およそ四年に一度の頻度で『九大文学』という名の冊子を刊行することが慣わしとなっている。『九大文学』はいわゆるベスト文集、すなわちこれまで発行してきた部誌のなかから、秀逸と思われる作品を部員の投票によって選出し、一冊の本にまとめた文集である。
先日、2019年度版のベスト文集が発行された。私も編集人の一人として、主に組版に携わらせていただいた。
私はこれまで、長いこと小説同人誌の編集に携わってきた。その活動を通じて、小説同人誌の作り方についてのノウハウが蓄積されてきた。先日発行した2019年度版ベスト文集では、そのノウハウを遺憾なく発揮したつもりである。ベスト文集の制作記録を書くことを通じて、LaTeXによる小説同人誌の制作法を伝えられたらと願う1。
表紙データ 表紙 まずは表紙データの作り方から解説していこう。今回は、某君がGIMPで表紙を作ってくれた。英字だけのシンプルでかっこいい素敵な表紙だ。まるでペーパーバックのようである。
さて、このような素敵なデザインの表紙をどうやって作るかであるが、これについては、残念ながら私から伝えられることは何もない。「GIMPやペイントや手書きなどで頑張って作って下さい」と言うほかない。
私から言いたいことは、GIMPなどで作った表紙画像から、どうやって入稿用の表紙データを作るかである。
LaTeXによる表紙データの作り方 表紙データをPDFで入稿するようにと規定している印刷所も多い。つまり入稿するためには、画像をPDF化しなければならないのだ。そこで、今回私はPNG形式の表紙データをLaTeXによってPDF化することにした。
まず、表紙用の画像データをhyosi.pngというファイル名で保存しておくことにする。そして、次のようなTeXファイルを作る。
\documentclass{article} \usepackage{pdfpages} \begin{document} \includepdf[fitpaper]{hyosi.png} \end{document} これをpdfLaTeXで処理すれば、PDF形式の表紙データが得られる。TeXは、画像をPDF化するのにも使えるのだ。便利なものである。
PP加工 印刷所に入稿予約をするとき、表紙に使う紙を選ぶことができる。今回はペルーラ・スノーホワイトを使用した。これは、光を当てるときらきらと輝く紙である。この紙に、オプションとして、マットPP加工を施してもらった。
なるべくPP加工を施してもらうことが大切である。PP加工をしておけば、本同士が擦れても塗料が剥がれることがないし、水にも多少耐性ができて丈夫になるので、PP加工はなるべく印刷所に頼んでやってもらおう。
（次回に続く）
などとエラそうに書いているが、所詮は素人の手すさびにすぎない。間違ったことが書かれてあっても、大目に見ていただきたい。&amp;#160;&amp;#x21a9;&amp;#xfe0e;</description>
    </item>
    
    <item>
      <title>git diff で一文字ずつ差分表示する</title>
      <link>https://qdaibungei.github.io/latex/documents/2019-09-07-git-diff/</link>
      <pubDate>Sat, 07 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2019-09-07-git-diff/</guid>
      <description>方法 git diff で一文字ずつ差分表示するには次のようにすればよい。
git diff --color-words --word-diff-regex=&amp;#39;\\w+|[^[:space:]]&amp;#39; 参考文献 git diff を1文字単位で出力する </description>
    </item>
    
    <item>
      <title>表題つきの四角い枠（四角いitembox環境）</title>
      <link>https://qdaibungei.github.io/latex/documents/2019-06-15-fitembox/</link>
      <pubDate>Sat, 15 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2019-06-15-fitembox/</guid>
      <description>はじめに ascmac.styを用いると、itembox環境というものが使える。表題つきの丸い枠である。この枠は、レジュメなどを作るとき使い勝手がよい。
ところで丸い枠ではなく四角い枠が使いたいときもある。こういうときはどうすればよいか。四角い枠を定義すればよい。以下は、ネットで見つけて拾ったものである。
fitembox環境の定義 以下、ネットで拾った「表題つきの四角い枠」の定義である。fitembox環境と名づけられている。使いかたはitembox環境と同じである。
% % fitembox environment % \def\fitembox{\@ifnextchar[{\@itembox}{\@itembox[c]}} \def\@myhleader{\leaders\hrule height .4pt\hfil} \def\endfitembox{\end{minipage}\egroup% \setbox\scscb@x=\hbox to\linewidth{% \vbox{\offinterlineskip% \thicklines\setlength{\unitlength}{1pt}% \hbox{\rule{10pt}{.4pt}% \hbox to\@scw{\if l\the\@iboxpos\else\@myhleader\fi \space\vbox to.4pt{\vss\hbox{\box\@iboxstr}\vss}% \space\if r\the\@iboxpos\else \@myhleader\fi}% \rule{10pt}{.4pt}} \vskip 10pt \hbox to\linewidth{\hfill\box\scb@x\hfill} \vskip 10pt \hrule height.4pt}} \noindent\hbox to\linewidth{% \vrule width .4pt \hss \box\scscb@x \hss \vrule width .4pt}% \egroup\vskip0pt} 使用例 \begin{fitembox}[l]{夏目漱石} 吾輩は猫である。 \end{fitembox} </description>
    </item>
    
    <item>
      <title>三点リーダを並べる</title>
      <link>https://qdaibungei.github.io/latex/documents/2019-04-01-leader/</link>
      <pubDate>Mon, 01 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2019-04-01-leader/</guid>
      <description>方法 目次など、三点リーダを行長いっぱいまで並べる必要に迫られることがある。これをLaTeXで実現するためには\leadersを使う。
あ\kern-.33333zw\leaders\hbox to .33333zw{\hss\raise.3zw\hbox{.}\hss}\hfill あ こうすると、ピリオドを三点リーダと同じ間隔で行長いっぱいまで並べることができる。
結果 組版結果は以下のようになる。
上は\leadersを使ったものであり、下は…（三点リーダ）を直接手作業で書き並べたものである。上と下でほぼ同じ形になっており、望ましい結果が得られていることが分かる。
参考文献 藤田眞作『LaTeX2eまくろの八衢』（オンライン版） </description>
    </item>
    
    <item>
      <title>和文フォントを混植する方法</title>
      <link>https://qdaibungei.github.io/latex/documents/2019-03-31-konsyoku/</link>
      <pubDate>Sun, 31 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2019-03-31-konsyoku/</guid>
      <description>はじめに 和文フォントは、平仮名や片仮名だけ別のフォントに置き換えて使用することがある。漢字は同じでも、平仮名が違えば、紙面の印象を大きく変えることができるからだ。このように、漢字と平仮名とで別のフォントを使うことを「混植」と言う。
LaTeXで混植をする方法の解説としては、これまでにも優れた記事がいくつか存在している。例えば「ヒラギノ明朝W2と游築五号仮名W2混植方法」など。しかしそこに書かれた方法は、いくぶんか簡略的なものだというきらいがある。otfパッケージのburasageオプションが使えなかったり、upLaTeXでは使えなかったりするのだ。
そこで本稿では、上述の欠点への補足として、やや備忘録的に記事を書いてみたい。
必要なファイルの用意 まず、必要なファイルを揃えておこう。ここでは游明朝体と游明朝体五号かなの混植をしてみよう。
CTANにあるjapanese-otfパッケージからbaseplとscriptというディレクトリをダウンロード。またmkjvfもダウンロードしておく。
同様にjapanese-otf-uptexからbasepl、script、umkjvfをダウンロード。
さらに次のスクリプトを作成する。
#!/bin/sh mkdir tfm mkdir vf # 普通にtfmファイルを生成 for face in r b do for hv in h v do ppltotf basepl/base-${hv}.pl yumin5go${face}-${hv} ppltotf basepl/base-${hv}.pl expyumin5go${face}-${hv} ppltotf basepl/brsg-${hv}.pl brsgyumin5go${face}-${hv} ppltotf basepl/brsg-${hv}.pl brsgexpyumin5go${face}-${hv} # uppltotf -kanji=uptex basepl/ubase-${hv}.pl upyumin5go${face}-${hv} uppltotf -kanji=uptex basepl/ubase-${hv}.pl upexpyumin5go${face}-${hv} uppltotf -kanji=uptex basepl/ubrsg-${hv}.pl upbrsgyumin5go${face}-${hv} uppltotf -kanji=uptex basepl/ubrsg-${hv}.pl upbrsgexpyumin5go${face}-${hv} done done # ここが混植のキモ。 # 混植しないときは引数二つでよかったが、混植のため引数は三つ。 # しかし仕組みはあまり理解できていない。 for face in r b do for hv in h v do perl mkjvf -m yumin5go${face}-${hv} hmin${face}-${hv} r-yumin5go${face}-${hv} perl mkjvf -m -sage brsgyumin5go${face}-${hv} hmin${face}-${hv} r-yumin5go${face}-${hv} perl mkjvf -m -expert expyumin5go${face}-${hv} hmin${face}-${hv} cidjmin${face} perl mkjvf -m -sage -expert brsgexpyumin5go${face}-${hv} hmin${face}-${hv} cidjmin${face} done done for face in r b do for hv in h v do perl umkjvf -m -ucs -sp 1 upyumin5go${face}-${hv} uphmin${face}-${hv} r-upyumin5go${face}-${hv} perl umkjvf -m -ucs -sp 1 -sage upbrsgyumin5go${face}-${hv} uphmin${face}-${hv} r-upyumin5go${face}-${hv} perl umkjvf -m -ucs -sp 1 -expert upexpyumin5go${face}-${hv} uphmin${face}-${hv} cidjmin${face} perl umkjvf -m -ucs -sp 1 -sage -expert upbrsgexpyumin5go${face}-${hv} uphmin${face}-${hv} cidjmin${face} done done echo &amp;#34;making tfm for supplementary plane .</description>
    </item>
    
    <item>
      <title>jfontsパッケージ</title>
      <link>https://qdaibungei.github.io/latex/documents/2019-03-30-jfonts/</link>
      <pubDate>Sat, 30 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2019-03-30-jfonts/</guid>
      <description>はじめに LaTeXでPDFに和文フォントを埋め込む際、いちいちmapファイルを書き換えるのは面倒である。そこでjfontsパッケージというLaTeXパッケージを作った。簡単な工夫だが、役に立つ。
jfontsパッケージは、otfパッケージと併用することを前提としている。フォントを変えたいときはフォントのファイル名を書き換えればよい。
jfonts.sty % % jfonts.sty % \NeedsTeXFormat{pLaTeX2e} \ProvidesPackage{jfonts} \def\jf@hminl{ToppanBunkyuMincho-Regular.otf} \def\jf@hminr{HiraMinProN-W3.otf} \def\jf@hminb{HiraMinProN-W6.otf} \def\jf@hgothr{HiraKakuProN-W3.otf} \def\jf@hgothb{HiraKakuProN-W6.otf} \def\jf@hgotheb{HiraKakuStdN-W8.otf} \def\jf@hmgothr{HiraMaruPro-W4.otf} \AtBeginDvi{% % TEXT, 90JIS \special{pdf:mapline hminl-h H \jf@hminl}% \special{pdf:mapline hminl-v V \jf@hminl}% \special{pdf:mapline hminr-h H \jf@hminr}% \special{pdf:mapline hminr-v V \jf@hminr}% \special{pdf:mapline hminb-h H \jf@hminb}% \special{pdf:mapline hminb-v V \jf@hminb}% \special{pdf:mapline hgothr-h H \jf@hgothr}% \special{pdf:mapline hgothr-v V \jf@hgothr}% \special{pdf:mapline hgothb-h H \jf@hgothb}% \special{pdf:mapline hgothb-v V \jf@hgothb}% \special{pdf:mapline hgotheb-h H \jf@hgotheb}% \special{pdf:mapline hgotheb-v V \jf@hgotheb}% \special{pdf:mapline hmgothr-h H \jf@hmgothr}% \special{pdf:mapline hmgothr-v V \jf@hmgothr}% % TEXT, JIS04 \special{pdf:mapline hminln-h H \jf@hminl}% \special{pdf:mapline hminln-v V \jf@hminl}% \special{pdf:mapline hminrn-h H \jf@hminr}% \special{pdf:mapline hminrn-v V \jf@hminr}% \special{pdf:mapline hminbn-h H \jf@hminb}% \special{pdf:mapline hminbn-v V \jf@hminb}% \special{pdf:mapline hgothrn-h H \jf@hgothr}% \special{pdf:mapline hgothrn-v V \jf@hgothr}% \special{pdf:mapline hgothbn-h H \jf@hgothb}% \special{pdf:mapline hgothbn-v V \jf@hgothb}% \special{pdf:mapline hgothebn-h H \jf@hgotheb}% \special{pdf:mapline hgothebn-v V \jf@hgotheb}% \special{pdf:mapline hmgothrn-h H \jf@hmgothr}% \special{pdf:mapline hmgothrn-v V \jf@hmgothr}% % CID \special{pdf:mapline otf-cjml-h Identity-H \jf@hminl}% \special{pdf:mapline otf-cjml-v Identity-V \jf@hminl}% \special{pdf:mapline otf-cjmr-h Identity-H \jf@hminr/AJ16}% \special{pdf:mapline otf-cjmr-v Identity-V \jf@hminr/AJ16}% \special{pdf:mapline otf-cjmb-h Identity-H \jf@hminb/AJ16}% \special{pdf:mapline otf-cjmb-v Identity-V \jf@hminb/AJ16}% \special{pdf:mapline otf-cjgr-h Identity-H \jf@hgothr}% \special{pdf:mapline otf-cjgr-v Identity-V \jf@hgothr}% \special{pdf:mapline otf-cjgb-h Identity-H \jf@hgothb}% \special{pdf:mapline otf-cjgb-v Identity-V \jf@hgothb}% \special{pdf:mapline otf-cjge-h Identity-H \jf@hgotheb/AJ16}% \special{pdf:mapline otf-cjge-v Identity-V \jf@hgotheb/AJ16}% \special{pdf:mapline otf-cjmgr-h Identity-H \jf@hmgothr/AJ16}% \special{pdf:mapline otf-cjmgr-v Identity-V \jf@hmgothr/AJ16}% % Unicode 90JIS \special{pdf:mapline otf-ujml-h UniJIS-UTF16-H \jf@hminl}% \special{pdf:mapline otf-ujml-v UniJIS-UTF16-V \jf@hminl}% \special{pdf:mapline otf-ujmr-h UniJIS-UTF16-H \jf@hminr}% \special{pdf:mapline otf-ujmr-v UniJIS-UTF16-V \jf@hminr}% \special{pdf:mapline otf-ujmb-h UniJIS-UTF16-H \jf@hminb}% \special{pdf:mapline otf-ujmb-v UniJIS-UTF16-V \jf@hminb}% \special{pdf:mapline otf-ujgr-h UniJIS-UTF16-H \jf@hgothr}% \special{pdf:mapline otf-ujgr-v UniJIS-UTF16-V \jf@hgothr}% \special{pdf:mapline otf-ujgb-h UniJIS-UTF16-H \jf@hgothb}% \special{pdf:mapline otf-ujgb-v UniJIS-UTF16-V \jf@hgothb}% \special{pdf:mapline otf-ujge-h UniJIS-UTF16-H \jf@hgotheb}% \special{pdf:mapline otf-ujge-v UniJIS-UTF16-V \jf@hgotheb}% \special{pdf:mapline otf-ujmgr-h UniJIS-UTF16-H \jf@hmgothr}% \special{pdf:mapline otf-ujmgr-v UniJIS-UTF16-V \jf@hmgothr}% % Unicode JIS04 \special{pdf:mapline otf-ujmln-h UniJIS2004-UTF16-H \jf@hminl}% \special{pdf:mapline otf-ujmln-v UniJIS2004-UTF16-V \jf@hminl}% \special{pdf:mapline otf-ujmrn-h UniJIS2004-UTF16-H \jf@hminr}% \special{pdf:mapline otf-ujmrn-v UniJIS2004-UTF16-V \jf@hminr}% \special{pdf:mapline otf-ujmbn-h UniJIS2004-UTF16-H \jf@hminb}% \special{pdf:mapline otf-ujmbn-v UniJIS2004-UTF16-V \jf@hminb}% \special{pdf:mapline otf-ujgrn-h UniJIS2004-UTF16-H \jf@hgothr}% \special{pdf:mapline otf-ujgrn-v UniJIS2004-UTF16-V \jf@hgothr}% \special{pdf:mapline otf-ujgbn-h UniJIS2004-UTF16-H \jf@hgothb}% \special{pdf:mapline otf-ujgbn-v UniJIS2004-UTF16-V \jf@hgothb}% \special{pdf:mapline otf-ujgen-h UniJIS2004-UTF16-H \jf@hgotheb}% \special{pdf:mapline otf-ujgen-v UniJIS2004-UTF16-V \jf@hgotheb}% \special{pdf:mapline otf-ujmgrn-h UniJIS2004-UTF16-H \jf@hmgothr}% \special{pdf:mapline otf-ujmgrn-v UniJIS2004-UTF16-V \jf@hmgothr}% }% \if@otf@uplatex \AtBeginDvi{% % TEXT, 90JIS \special{pdf:mapline uphminl-h UniJIS-UTF16-H \jf@hminl}% \special{pdf:mapline uphminl-v UniJIS-UTF16-V \jf@hminl}% \special{pdf:mapline uphminr-h UniJIS-UTF16-H \jf@hminr}% \special{pdf:mapline uphminr-v UniJIS-UTF16-V \jf@hminr}% \special{pdf:mapline uphminb-h UniJIS-UTF16-H \jf@hminb}% \special{pdf:mapline uphminb-v UniJIS-UTF16-V \jf@hminb}% \special{pdf:mapline uphgothr-h UniJIS-UTF16-H \jf@hgothr}% \special{pdf:mapline uphgothr-v UniJIS-UTF16-V \jf@hgothr}% \special{pdf:mapline uphgothb-h UniJIS-UTF16-H \jf@hgothb}% \special{pdf:mapline uphgothb-v UniJIS-UTF16-V \jf@hgothb}% \special{pdf:mapline uphgotheb-h UniJIS-UTF16-H \jf@hgotheb}% \special{pdf:mapline uphgotheb-v UniJIS-UTF16-V \jf@hgotheb}% \special{pdf:mapline uphmgothr-h UniJIS-UTF16-H \jf@hmgothr}% \special{pdf:mapline uphmgothr-v UniJIS-UTF16-V \jf@hmgothr}% % TEXT, JIS04 \special{pdf:mapline uphminln-h UniJIS2004-UTF16-H \jf@hminl}% \special{pdf:mapline uphminln-v UniJIS2004-UTF16-V \jf@hminl}% \special{pdf:mapline uphminrn-h UniJIS2004-UTF16-H \jf@hminr}% \special{pdf:mapline uphminrn-v UniJIS2004-UTF16-V \jf@hminr}% \special{pdf:mapline uphminbn-h UniJIS2004-UTF16-H \jf@hminb}% \special{pdf:mapline uphminbn-v UniJIS2004-UTF16-V \jf@hminb}% \special{pdf:mapline uphgothrn-h UniJIS2004-UTF16-H \jf@hgothr}% \special{pdf:mapline uphgothrn-v UniJIS2004-UTF16-V \jf@hgothr}% \special{pdf:mapline uphgothbn-h UniJIS2004-UTF16-H \jf@hgothb}% \special{pdf:mapline uphgothbn-v UniJIS2004-UTF16-V \jf@hgothb}% \special{pdf:mapline uphgothebn-h UniJIS2004-UTF16-H \jf@hgotheb}% \special{pdf:mapline uphgothebn-v UniJIS2004-UTF16-V \jf@hgotheb}% \special{pdf:mapline uphmgothrn-h UniJIS2004-UTF16-H \jf@hmgothr}% \special{pdf:mapline uphmgothrn-v UniJIS2004-UTF16-V \jf@hmgothr}% }% \fi 追記 いまだとTeX Liveに収録されているpxchfonパッケージがあるので、これを使って次のように書くのがラクである。</description>
    </item>
    
    <item>
      <title>CTANにない欧文フォントをLaTeXにインストールする</title>
      <link>https://qdaibungei.github.io/latex/documents/2019-03-29-font-install/</link>
      <pubDate>Fri, 29 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2019-03-29-font-install/</guid>
      <description>はじめに upLaTeXにおいて、CTANに存在する欧文フォントをインストールするのは容易だ。しかしCTANに存在しないフォントをインストールするのは難しい。
困難の原因は、二つある。第一は、tfmファイルやmapファイルを生成するのが難しいことである。第二は、フォント設定ファイルの作り方が分かりづらいことである。
そこで、備忘録を兼ね、以下にその方法を記す。
一つのウェイトをインストールしてみる tfmとは フォントの形式は通常、otfやttfなどであるが、TeXはそれらを直接に扱うことができない。そこでtfmファイルなどのフォントファイルを生成して介在させる必要がある（tfmは、TeX Font Metricの略）。面倒だが、フォントごとに別のtfmを生成せねばならない。
otftotfm tfmを生成するためには「otftotfm」というソフトを使う。otftotfmはふつうTeXをインストールしたときに一緒にインストールされているはずだ。インストールされているかどうかを確認するためには、ターミナルで、
otftotfm --version と打ち、ヴァージョン情報が返ってくるかどうかを確かめればよい。
tfmなどの生成 さて今回はGoogle Fontsに収録されているJosefin Slabというフォントをインストールしてみよう。まずは、一つのウェイト（Regular）だけをインストールしてみる。
まず作業用ディレクトリを適当に作っておき、そこにJosefinSlab-Regular.ttfを入れておく。ターミナルで作業用ディレクトリに行き、次のコマンドを実行してみよう。
otftotfm --no-type1 --no-dotlessj --mapfile=josefinslab.map -e ec.enc -n josefinslab-regular JosefinSlab-Regular.ttf すると、○○○.tfm、○○○.vf、○○○.map、○○○.encという四種類のファイルが生成されるはずである1。
一応、オプションの意味を説明しておこう。
--no-type1 --no-dotlessjは、「Type 1フォントへの変換を行わない」ということ、らしい。あまり理解できていない。 --mapfile=josefinslab.mapで、mapファイル名の指定をする。mapファイルの名前は何でもよい（自分が分かりやすいような名前にする）。 -e ec.encは、エンコーディングファイルの指定。ec.encを指定すると、T1エンコーディングになる。ちなみにtexnansi.encを指定するとLY1エンコーディングになる。エンコーディングって何なのかいまいち分かっていないが、私はT1エンコーディングにしておいて困ったことはない。 -n josefinslab-regularは、tfm名の指定。これも、自分が分かりやすいよう適当に名前を付ければよい。 また、-fkernとすればカーニングの、-fligaとすればリガチャの情報を、tfmに含ませることができる。Josefin Slabにはこれらの機能がなかったから上ではこのオプションをつけていないが、この機能があればつけたほうがよい。つまり、もしJosefin Slabがカーニングやリガチャの機能を備えていた場合には、次のようにオプションをつけてコマンドを実行するほうがよい、というわけである。
otftotfm -fkern -fliga --no-type1 --no-dotlessj --mapfile=josefinslab.map -e ec.enc -n josefinslab-regular JosefinSlab-Regular.ttf otfinfo -f JosefinSlab-Regular.ttfなどと打てば、フォントにどのような機能が備わっているかを確認できる。
styファイルの作成 各種ファイルが生成できたならば、すかさず、josefinslab.styという名前でstyファイルを作る。
% % josefinslab.sty % \AtBeginDvi{\special{pdf:mapfile josefinslab.map}}% 先程生成したmapファイルの読み込み \DeclareFontFamily{T1}{josefinslab}{}% TeXファイル内で使うフォント名を設定 \DeclareFontShape{T1}{josefinslab}{m}{n}{&amp;lt;-&amp;gt; josefinslab-regular}{}% 上で設定したフォント名と、先程生成したtfmファイルとを結びつける \endinput インストールできたかを確認 ここまでできたら、ほとんどインストールは完了したと言ってよい（今のままだと、各種ファイルがディレクトリにたくさん散らばっていて、気持ち悪いかもしれないが、この問題は次の節で解決する）。</description>
    </item>
    
    <item>
      <title>otfパッケージのぶら下げ組をちょっと改良する</title>
      <link>https://qdaibungei.github.io/latex/documents/2018-01-12-burasage/</link>
      <pubDate>Fri, 12 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2018-01-12-burasage/</guid>
      <description>緒言 本稿は、otfパッケージによるぶら下げ組を改良するための方法を記すものである。
本論 otfパッケージにはburasageオプションがあり、これを利用するとぶら下げ組ができる。
\usepackage[burasage]{otf} しかし、このぶら下げ組にはひとつ問題がある。句読点が行末に来たとき、必ずぶら下げ処理がおこなわれてしまうのである1。
むろん、これはこれでひとつの立派な組版方針である。だが、行長が短いときに強制的にぶら下げ処理がおこなわれてしまうと、字間が開いてしまい、間延びした印象の組みかたになってしまう。よって、われわれとしては、ぶら下げ処理を少し抑制するように修正してみたい。これは、商業出版の本によく見られる組みかたでもある。
そこで、プリアンブルなどに以下のように記述し、\。と\、というマクロを作る。
\if@burasage \def\、{% \@ifnextchar\par{、}{、\hbox{}}% }% \def\。{% \@ifnextchar\par{。}{。\hbox{}}% }% \else \def\、{\nobreak\makebox[1zw][l]{、}}% \def\。{\nobreak\makebox[1zw][l]{。}}% \fi あとは、文章中の句読点すべてを\。および\、で置き換えればよい。すると、burasageオプション時には適度にぶら下げが抑制された組みかたとなる。また、burasageオプションを外したときには、追い出し組となる。
細かい調整 ただし、このままでは句読点と括弧類とが並んだとき、空きが広くなりすぎてしまう。たとえば、\。「のように、句読点の直後に始め括弧が来た場合、\。\&amp;lt;「とする（つまり\&amp;lt;を追加する）ことが必要となる。
句点と鉤括弧の場合だけ考えると、結局、以下のような置換が必要である。
\。「 → \。\&amp;lt;「 \。」 → 。」 」\。 → 」\&amp;lt;\。 このような置換を、すべての括弧類と句読点との組み合わせを考えて、おこなえばよい。置換作業は手作業だと面倒きわまりないので、PythonなりRubyなりで置換スクリプトを組んで置換するのがよいであろう。
結言 LaTeXのデフォルトは追い込み組であるが、これは商業出版にはあまり見られない。そこで上のような設定をし、ぶら下げ組にするか、追い出し組にするとよいのである。そうすれば、いっそう商業出版に近い組みかたが実現でき、嬉しい気分に浸れることであろう。
ただし段落末尾はそのかぎりではない。&amp;#160;&amp;#x21a9;&amp;#xfe0e;</description>
    </item>
    
    <item>
      <title>LaTeXによる小説誌制作のヒント</title>
      <link>https://qdaibungei.github.io/latex/documents/2017-10-12-book-making-hints/</link>
      <pubDate>Thu, 12 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2017-10-12-book-making-hints/</guid>
      <description>はじめに 以下では、小説誌制作をLaTeXでおこなう場合のヒントを述べる。
フォントの指定 LaTeXのデフォルトフォントはあまり小説向きではない。そこで以下のように記述しフォントを変更する。
まず日本語フォントであるが、特にこだわりがないならば、とりあえず游明朝にしておくとよい。游明朝を使うには、以下のように書く（以下はupLaTeXを使うことを前提とした書き方である。いまどきわざわざpLaTeXを使う理由はあるまい）。
% upLaTeXでA5サイズの本を作る場合のdocumentclassの書き方 \documentclass[a5paper,papersize,uplatex,dvipdfmx]{jsbook} % 日本語フォントを游明朝にする \usepackage[deluxe,uplatex]{otf} \AtBeginDvi{\special{pdf:mapfile otf-up-yu-win10.map}}% Windows 10以外の場合は適宜変更せよ。追記：こう書かずにpxchfonパッケージを使うほうが簡単かも。 欧文フォントも変更しておこう。
% 欧文フォントの変更 \usepackage[scale=1.05]{cochineal}% この欧文フォントはわりと游明朝に合う \usepackage[scale=0.95,defaultsans]{opensans}% この欧文フォントはいろいろな日本語ゴシック体フォントに合う jdashパッケージ 游明朝だと、ダッシュ――がつながらない。そこでjdashパッケージを導入し、これを使う。jdashパッケージについてはここを参照のこと。
hanmenパッケージの使用 まずhanmenパッケージをダウンロードし、TeXファイルと同じフォルダへ入れる。
そしてプリアンブルに以下を記述する。
% 上のフォント設定をした後に書く \usepackage[Q=13,H=22,W=49,L=21,ko=3.875truemm,te=6.5truemm,footskip=2.47truemm,tate]{hanmen} % ついでに、欧文のベースラインなどを適当に変更しておこう \tbaselineshift=.3zw \kanjiskip=0zw plus .25zw minus .03125zw \xkanjiskip=.25zw plus .25zw minus .0625zw これで厳密な版面の設定が可能となる。厳密というのは、たとえば表と裏とで行が揃っているということである（厳密な設定をしないと、行がズレる。紙を透かして見ると行がズレているかどうか分かる）。
hanmenパッケージの使い方の詳細はこの記事を参照のこと。
\tcyコマンド LaTeXで縦書きをする際、縦中横には\rensujiを使うよう言われる。しかし\rensujiだと前後のアキがおかしくなる（たとえば、行頭で\rensujiを使うとインデント量が狂う）。そこで\tcy命令を新たに作り、これを使うのがよい。
\usepackage{plext} \makeatletter \chardef\nvlsty@zenkakuSpace=\jis&amp;#34;2121\relax \newcommand{\tcy}[1]{% \nvlsty@zenkakuSpace\kern-1zw\relax \leavevmode\hbox to 1zw{% \centering\rensuji*{#1}\relax }\relax \kern-1zw\nvlsty@zenkakuSpace } \makeatother 以上をプリアンブルなどに書いておく。使い方はいたって簡単で、\tcy{12}時、のようにすればよい。
禁則処理の設定 縦書きの場合、禁則処理はほどほどに抑制しておくと商業出版物の組版に似せることができる。プリアンブルなどに以下を記述する。
\makeatletter \def\hoge@set@prebreakpenalty#1#2{% \@tfor\@tempa:=#1\do{\expandafter\prebreakpenalty\expandafter`\@tempa =#2}} \clubpenalty=0 \widowpenalty=0 \jcharwidowpenalty=0 \displaywidowpenalty=0 \prebreakpenalty\jis&amp;#34;2147=10000 % 5000 ’ \postbreakpenalty\jis&amp;#34;2148=10000 % 5000 “ \prebreakpenalty\jis&amp;#34;2149=10000 % 5000 ” \inhibitxspcode`〒=2 \hoge@set@prebreakpenalty{ヽヾゝゞ々〻}{10000} \hoge@set@prebreakpenalty{ーぁぃぅぇぉっゃゅょゎァィゥェォッャュョヮヵヶゕゖㇰㇱㇲㇳㇴㇵㇶㇷㇸㇹㇺㇻㇼㇽㇾㇿ…}{0} \makeatother フッター 以前出した本のフッターの設定は大体こんな感じである。</description>
    </item>
    
    <item>
      <title>pdfpagesレシピ集</title>
      <link>https://qdaibungei.github.io/latex/documents/2017-09-27-pdfpages/</link>
      <pubDate>Wed, 27 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2017-09-27-pdfpages/</guid>
      <description>本稿はLaTeX＋pdfpagesパッケージを用いてPDFを生成・加工するレシピ集である。
PDFのスケーリング 自炊した文書の加工 自炊した文書の頁番号調整＋栞付与 自炊した見開き文書の分割 縦書き文書の見開き化 画像のPDF化 大きさを指定して画像をPDF化 縦横比そのままに画像をPDF化 印刷時の縮小の打ち消し A4にする PDFのスケーリング \documentclass{minimal} \usepackage{pdfpages} \newcommand{\mainpdf}{main.pdf} \begin{document} \includepdf[pages=-, scale=1.25, offset=0mm -27mm]{\mainpdf} \end{document} offset=X Yは、X軸方向、Y軸方向に、それぞれ版面全体を移動させる。上余白が足りないときにはoffset=0mm -27mmなどとする。
自炊した文書の加工 自炊した文書の頁番号調整＋栞付与 \documentclass{minimal} \usepackage{pdfpages,hyperref,bookmark} \newcommand{\mainpdf}{main.pdf} \begin{document} \pagenumbering{Arabic} \includepdf[fitpaper,page=1]{\mainpdf} \setcounter{page}{1} \pagenumbering{roman} \includepdf[fitpaper,page={2-9}]{\mainpdf} \setcounter{page}{1} \pagenumbering{arabic} \includepdf[fitpaper,page={10-last}]{\mainpdf} \bookmark[page=1,level=0]{Front Page} \bookmark[page=3,level=0]{Title} \bookmark[page=5,level=0]{Contents} \bookmark[page=25,level=0]{Introduction: The Chomskian Perspective On Language Study} \bookmark[page=27,level=1]{Introduction} \end{document} 自炊した見開き文書の分割 \def\target{main.pdf}%% 対象PDFファイル名 \def\ratio{0}%% 中央を何パーセント切り落とすか。負の数の場合は中央を両側に含める。-99〜99の百分率値を指定。 %%% 横書きか縦書きかで条件分岐 \newif\ifyoko \yokofalse % \yokotrue \documentclass{minimal} \usepackage{graphicx} %%% 総ページ数の取得 \pdfximage{\target} \newcount\pagecount \pagecount=\pdflastximagepages %%% 先頭ページを読んで生成PDFのページサイズを決定（/Rotate も反映） \setbox0\hbox{\includegraphics{\target}} \newdimen\originalwidth \originalwidth=\wd0 %%% 生成PDFのページサイズを決定 \usepackage[papersize={\dimexpr\originalwidth*(100-\ratio)/200\relax,\ht0},margin=0pt]{geometry} \usepackage{pdfpages} \begin{document} \parindent=0pt %%% 画像配置を実行 \newcount\thispage \loop \advance\thispage1 %%% 左ページの配置 \ifnum\thispage&amp;gt;1 \setbox0\hbox{\includegraphics[page=\thispage]{\target}} \fi \ifyoko \copy0\newpage \else \leavevmode\kern\pdfpagewidth\kern-\originalwidth\copy0\newpage \fi %%% 右ページの配置 \ifyoko \leavevmode\kern\pdfpagewidth\kern-\originalwidth\box0\newpage \else \box0\newpage \fi \ifnum\thispage&amp;lt;\pagecount\repeat \end{document} 上記ソースは、「pdfTeX による見開きPDFの結合・分割」を元に、縦書きにも対応できるよう改造したもの。</description>
    </item>
    
    <item>
      <title>TeX Gyreフォントの使い方</title>
      <link>https://qdaibungei.github.io/latex/documents/2017-08-11-texgyre/</link>
      <pubDate>Fri, 11 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2017-08-11-texgyre/</guid>
      <description>TeX Gyreのパッケージ名をすぐ忘れてしまうのでメモしておく。
TeX Gyreフォント Adventor URW Gothic LにもとづくITC Avant Garde Gothic代用フォント。
\usepackage[scale=0.9]{tgadventor} ファミリ名はqagである。
Bonum URW Bookman LにもとづくITC Bookman代用フォント。
\usepackage[scale=0.95]{tgbonum} ファミリ名はqbkである。
Chorus URW Chancery L Medium ItalicにもとづくITC Zapf Chancery代用フォント。
\usepackage[scale=0.95]{tgbonum} ファミリ名はqzcである。
Cursor URW Nimbus Mono LにもとづくCourier代用フォント。
\usepackage[scale=1]{tgcursor} ファミリ名はqcrである。
Heros URW Nimbus Sans LにもとづくHelvetica代用フォント。
\usepackage[scale=0.95]{tgheros} ファミリ名はqhvである。
Pagella URW Palladio LにもとづくPalatino代用フォント。
\usepackage{tgpagella} ファミリ名はqplである。
Schola URW Century Schoolbook LにもとづくCentury Schoolbook代用フォント。
\usepackage[scale=1]{tgschola} ファミリ名はqcsである。
数式はfourierncと合わせる（tgscholaより先に読み込む）。
Termes URW Nimbus Roman LにもとづくTimes代用フォント。
\usepackage{qtxmath} % 数式を使う場合これを先に読み込む \usepackage[scale=1]{tgtermes} ファミリ名はqtmである。
参考文献 奥村晴彦『［改訂第5版］LaTeX2e美文書作成入門』技術評論社、2010年。</description>
    </item>
    
    <item>
      <title>版面数値計算</title>
      <link>https://qdaibungei.github.io/latex/documents/2017-03-28-layoutcal/</link>
      <pubDate>Tue, 28 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2017-03-28-layoutcal/</guid>
      <description>版面の数値を計算するプログラムをJavaScriptで作った。
layoutcal.html
使い方はリンク先に書いてある。デザインをもう少し洗練させたかったが、デザイン力がないのでこのままで公開。</description>
    </item>
    
    <item>
      <title>Wordの傍点を青空文庫形式に変換する方法</title>
      <link>https://qdaibungei.github.io/latex/documents/2017-03-19-bouten/</link>
      <pubDate>Sun, 19 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2017-03-19-bouten/</guid>
      <description>以下の画像を参考に置換する。
置換用文字列は以下をコピペするとよい。
? ^&amp;［＃「^&amp;」に傍点］ </description>
    </item>
    
    <item>
      <title>LaTeXによる小説組版法（初級）</title>
      <link>https://qdaibungei.github.io/latex/documents/2017-02-26-latexnovel/</link>
      <pubDate>Sun, 26 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2017-02-26-latexnovel/</guid>
      <description>この記事は、LaTeXで小説を組版するにはどうすればよいかを具体的に解説するものである。理論的な話は最小限に留め、主として実践的な話題を取り上げる。つまり、具体的にどう手を動かせばLaTeXで小説が組版できるのかを解説する。
コンピュータおよびLaTeXの初心者でも読めるように配慮したつもりだが、LaTeXの知識ゼロだと厳しいかもしれない。
なお、以下の方法はあくまでも初心者向けの簡易的方法1であり、私が普段LaTeXで組版している実際の現場の方法とはかなり異なる。
電撃文庫の再現 雛形ファイルの用意 具体例として、LaTeXで電撃文庫のデザインで組版してみよう。といっても商用フォントが手元にない限り完全再現はできないので、大体同じようなデザインを作るだけであるが。
まず、以下を novelstyle.sty という名前で保存する。スタイルファイル内の記述の意味は、一応コメント文で書いておいた。
\NeedsTeXFormat{pLaTeX2e} \ProvidesPackage{novelstyle} \RequirePackage[Q=11.5,H=19,W=42,L=17,addten=2mm,headsep=5mm,tate]{hanmen}% hanmen.styは自作のパッケージ。これでざっくりと版面を設計する。 \RequirePackage[deluxe,uplatex]{otf}% フォントの多書体化。 \RequirePackage{plext}% plextは縦組み時に有用なパッケージ（なおutbook.clsなどの縦書き専用クラスを用いる場合には自動的に読み込まれる）。 \RequirePackage{pxrubrica}% pxrubricaはルビ振りに必要なパッケージ。 \RequirePackage{fancyhdr}% ヘッダー・フッターの改造に便利なパッケージ。 % %% header &amp;amp; footer % \fancyhf{}% ヘッダー・フッターの初期化 \def\nvlsty@nombre{\textit{\thepage}}% ページ番号を出力するときは\thepageと書く。 \def\nvlsty@booktitle{ここにタイトルを書く} \fancyhead[RE]{\vspace*{0pt}\scriptsize\nvlsty@nombre} \fancyhead[LO]{\vspace*{0pt}\footnotesize\nvlsty@nombre\hskip1zw\scriptsize\nvlsty@booktitle} % %% \tcy % % LaTeXの解説書では、縦中横に\rensujiを使うこととされているが、 % \rensujiだと無駄なアキが入ってしまいベタ組みできない。 % そこで、ここでは新たに\tcyを定義する。 \chardef\nvlsty@zenkakuSpace=\jis&amp;#34;2121\relax \def\tcy#1{% \nvlsty@zenkakuSpace\kern-1zw\relax \leavevmode\hbox to 1zw{% \centering\rensuji*{#1}% }% \kern-1zw\nvlsty@zenkakuSpace } % %% \xobeylines % % これは、空行をあけなくても段落分けできるようにする工夫。 % 参考：https://hakuoku.github.io/agakuTeX/tutorial/4_1linebreak/（ちなみにここに出てくるxsceyさんというのは当研究会メンバーです） % 本文中、\xobeylinesと書けば、空行をあけなくても段落が変わる。 % \disobeylinesと書けば、LaTeX記法通り、空行をあけないと段落が変わらないようになる。 % ただし、併用するパッケージによってはいろいろ弊害が出る場合があるので、素直に空行によって段落分けしたほうが無難かもしれない（実際私も、普段は空行で段落分けしている）。 {\catcode`\^^M=\active \gdef\xobeylines{\catcode`\^^M\active \def^^M{\par\leavevmode}}% \global\def^^M{\par\leavevmode}% } \def\disobeylines{\catcode`\^^M=5 } \let\disxobeylines=\disobeylines \AtBeginDocument{\xobeylines}%% 本文開始直後から\xobeylinesが適用されるようにする。 % %% 全角アキ % % 疑問符などの後に全角空白文字「　」を使ってアキを作ると、疑問符が行末に来たとき空白が行頭に出てしまって都合が悪い。 % そこで、全角アキは以下のマクロで作る必要がある。 \newcommand{\zenkakuaki}{\hskip1zw plus .</description>
    </item>
    
    <item>
      <title>本作りに役立つサイト</title>
      <link>https://qdaibungei.github.io/latex/documents/2017-02-25-bookmake/</link>
      <pubDate>Sat, 25 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2017-02-25-bookmake/</guid>
      <description>ここでは小説本を作るのに役立つサイトを列挙する。
組版の知識全般 特定のソフトウェアによらない、組版の普遍的な知識を得られるサイトを列挙した。上二つは必読。
小説同人誌のための組版レイアウトとDTP かっちりとした文章で組版に必要な知識を網羅してくれている。
文字を組む方法 プロの手による連載記事。
組版―Wikipedia 用語の確認に。
日本語組版処理の要件 技術者向け。
LaTeX関連 吉永徹美のLaTeX研究室 TeXコンサルタントの吉永徹美氏のサイト。残念ながら、いつのまにか閉鎖されてしまった。しかしインターネットアーカイブは残っているので中身は今も読むことができる。
MyTeXpert 書籍ではなくネットの文書でLaTeXに入門するなら、吉永氏のサイトかこのサイトがよいだろう。
よくわかるLaTeX小説サポートページ 同人誌として売られている『よくわかるLaTeX小説』という本のサポートページ。本を買っていなくても役立つ。
ルビのついた縦書の日本語文章をPDFにする方法 私が初めてLaTeXで小説を組もうとしたとき参考にしたサイト。このサイトには他にも「喘ぎ声ジェネレータ」などの面白いツールが公開されていたのだが、今確認してみたら、残念なことにいつのまにか閉鎖されていた。
編集者のためのTeX/LaTeX入門 LaTeXとは何か、ざっと概要を知りたいならこれ。
あがきながら覚えるTeX TeXで小説組版する方法を、あがきながら研究しているサイト。LaTeX初心者にも配慮された良心的な作りで、TeXインストール方法から解説してある。小説に特化しているのでわれわれ文藝人間にとってはありがたいサイトである。</description>
    </item>
    
    <item>
      <title>hanmenパッケージ</title>
      <link>https://qdaibungei.github.io/latex/documents/2017-02-18-hanmen/</link>
      <pubDate>Sat, 18 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2017-02-18-hanmen/</guid>
      <description>はじめに hanmenパッケージというLaTeXパッケージを作った。ダウンロードは以下からできる。
https://gist.github.com/qdaibungei/5f6986fa99fc9a7d86122a7a9417d64e hanmenパッケージとは、版面の設計1を厳密に行うためのパッケージである。たとえば、38字×40行で文書を作りたい、といったときにhanmenパッケージは有用である。
従来、LaTeXでは版面の設計が煩雑であった。特に縦組みの場合、geometryパッケージが使えないので厄介である2。そこで、縦組みでも版面設計がやりやすいようにと作ったのがhanmenパッケージである。
基本的な使い方 基本的な使い方は簡単である。プリアンブルに次のように書き込む。
\usepackage[Q=15,H=24,W=38,L=40]{hanmen} そうすると、
文字サイズ　15級 行送り　24歯 行長　38字 行数　40行 に設定できる。Q は文字サイズの単位「級」に、H は行送りの単位「歯」に、W はwidthに、L はlinesに由来している。なお、デフォルトではQ=11.5、H=19、W=42、L=17に設定してある。
各種オプション g グリッド線を表示させる（gに代入する値は上のWで指定した文字数と同じか、または近い整数値を入れる）。これで原稿用紙のようなマス目を表示させることができる。
\usepackage[g=38]{hanmen} tate 縦組みにする。
\usepackage[tate]{hanmen} ヘッダ・フッタ ヘッダ・フッタの位置の調整。
\usepackage[headheight=13mm, headsep=1mm, footskip=3mm]{hanmen} 上下左右の余白調整 デフォルトでは、版面は左右中央に配置される。
左右中央のいずれかに版面を寄せたい場合には、ノド、小口、天、地の広さを直接手動で指定することができる。なお当然ながら、ノドと小口を両方指定したり、天と地を両方指定したりすることはできない（基本的に、hanmenパッケージはベタ組するためのパッケージなので）。もし間違えて両方指定した場合はエラーが出るようにしてある。
% ノドと天の広さを指定 \usepackage[nodo=20mm, ten=15mm]{hanmen} % 小口と地の広さを指定 % \usepackage[koguchi=20mm, chi=15mm]{hanmen} また、ノド、小口、天、地の広さを直接指定するだけでなく、既存の値に加算することもできる（それぞれ、addnodo、addkoguchi、addten、addchiというオプションで指定できる。なおこれらオプションは同時に指定してもエラーは生じない）。
% ノドと天の広さを指定した後、広さを足す \usepackage[nodo=20mm, ten=15mm, addnodo=5mm, addten=1zw]{hanmen}% ノドは25mm、天は15mm+1zwで指定される % 小口と地の広さを指定した後、広さを足す % \usepackage[koguchi=20mm, chi=15mm, addkoguchi=-5mm, addchi=2mm]{hanmen}% 小口は15mm、地は17mmで指定される なお、版面を少しだけ小口側に寄せたり、天側に寄せたりしたい場合、以下のようにする（このオプションは正直インターフェースが微妙なので現在私自身は使っていないが、古い文書も処理できるよう残しておいた。現在の仕様では、同じことをするのにaddkoguchiなどを使ったほうが分かりやすいであろう）。
\usepackage[ko=3mm]{hanmen}%% 3mm小口寄せ % \usepackage[te=4mm]{hanmen}%% 4mm天寄せ % \usepackage[addkoguchi=-3mm]{hanmen}%% `\usepackage[ko=3mm]{hanmen}`と同値。この指定方法のほうがユーザーインターフェースとして分かりやすいであろう。 単位変更 文字サイズ単位・行送り単位にQやHではなくptを使う。</description>
    </item>
    
    <item>
      <title>jdashパッケージ</title>
      <link>https://qdaibungei.github.io/latex/documents/2017-02-17-jdash/</link>
      <pubDate>Fri, 17 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2017-02-17-jdash/</guid>
      <description>概要 jdashパッケージというLaTeXパッケージを作った。ダウンロードは以下からできる。
https://gist.github.com/qdaibungei/4230bb59434ec1ba505bc94dbfde1898 jdashというのはjapanese dashの略のつもりである。日本語文に現れる記号ダッシュ ― は、通常何個か並べて一本の線のようにして使うが、フォントによっては一本の線に見えない。一本の線のように見せるには工夫が必要だ。その工夫をパッケージ化したものがjdashパッケージだ。
ところで、人によってはときおり放心状態で「あ～～～」と声にならない声を発したくなることがある。しかしこれでは、波ダッシュ ～ がつながって見えないのでいまいち放心状態であることが伝達されにくい。そこで波線をつなげられるような工夫が必要となる。jdashパッケージでは、その工夫をも盛り込んだ。
使い方 ダッシュ この文章でも使っているようなふつうのダッシュ――あるいはダーシとも言う――を出力するには、\jdash という命令を使う。
\jdash{2} のように数字を与えれば、この例の場合2字分の長さのダッシュが出力される。なお、2字分の長さのダッシュ（倍角ダッシュ）に限り、\―― という命令でも出力可能に設定してある。
デフォルトでは、通常のダッシュ記号 ― を重ねることで一本につながったダッシュを出力するようにしている。このやり方は美文書などでも紹介されている有名なやり方である。
しかしPDFで見たときダブって見える弱点もある。そこでPDFで閲覧するときのために、罫線 ─ を使った表示ができると都合がよい。そこで用意している命令が \jdashstyle である。
\jdashstyle{―} % デフォルト \jdash{3} % ダブったダッシュが出る \jdashstyle{─} % ダッシュ記号を罫線（U+2500）に変更 \jdash{3} % 罫線で出力される \jdashstyle{rule} % ダッシュ記号を\ruleで生成されるものに変更 \jdash{3} % \ruleで出力される 波ダッシュ 「あ～～～～」と叫びたいとき、あるいはTeX言語話者らしく「えくすぱんどあふた～～～～！」と叫びたいときには波ダッシュがつながっていると便利だ。そのために \wdash という命令を用意してある（wave dashの略のつもり）。
えくすぱんどあふた\wdash{4}！ もしくは、\～ という命令を並べれば、波ダッシュ記号 ～ がいくらでもつながる。
えくすぱんどあふた\～\～\～\～\～\～\～！ フォントによっては波線同士の食い込み量がまずくて、うまくつながらないかもしれない。その場合は \wdashKerningAmount{数字} という命令を使う。数字の単位は zw である。
% \wdashKerningAmount{.25} % デフォルト。0.25zw分、波線が食い込む。 \wdashKerningAmount{.261} % 食い込み具合を変更。筑紫明朝はこのくらい食い込ませるとうまく波線がつながる。 なお、一部のライトノベルで使われているような波線 〰 の表示もできる。このために \wdashstyle という命令が容易されている。</description>
    </item>
    
    <item>
      <title>Wordのオートインデント機能を停止させる</title>
      <link>https://qdaibungei.github.io/latex/documents/2017-02-10-noautoindent/</link>
      <pubDate>Fri, 10 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2017-02-10-noautoindent/</guid>
      <description>はじめに Wordはおせっかい機能が多いことで有名である。中でも文芸サークルにおいて悪名高いのがオートインデント機能である。そこでここでは、このうざったいオートインデント機能が動作しないように設定する方法を記す。
手順 まず、赤丸で囲ったところをクリック。
次に、オプションをクリック。
オートコレクトのオプションをクリック。
入力オートフォーマットタブの「行の始まりのスペースを字下げに変更する」のチェックボックスを外す。図は、チェックボックスを外した状態である。
追記：「Tab/Space/BackSpaceキーでインデントとタブの設定を変更する」のチェックも外す必要があるらしい、という情報をネットで得た。私の環境では初めから外れていた。
むすび オートインデント機能を切る方法は直感的に分かりづらい。Wordがそのような分かりづらい作りになっているのはなぜであろうか。まったく不可解である。もしかすると宇宙人の陰謀かもしれない。NASAなどが早急に原因究明にあたってくれることを強く望む。</description>
    </item>
    
    <item>
      <title>初心者による初心者のための小説DTP入門の原稿の残骸</title>
      <link>https://qdaibungei.github.io/latex/documents/2016-11-29-dtp-guide-zangai/</link>
      <pubDate>Tue, 29 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2016-11-29-dtp-guide-zangai/</guid>
      <description>はじめに この文書の目的 この文書の狙いは、読みやすい小説の同人誌を作成するにはどうすればよいかを、主にDTPの観点から解説することにあった（が、この目標は断念を余儀なくされた1）。
主な対象読者は、小説の同人誌づくりの工程のうち、本文データ作成で悩んでいる人たちである。すなわち、
同人誌を作ってみたが、どうも本文が読みづらい 商業本に比べて見劣りがする と漠然と感じている人や、
Wordに小説本文を流し込んでみたが、『!?』が横倒しになって気持ち悪い ルビを振ると行間が空いてしまう といったように、意図した通りのデータ作成ができず苦しんでいる人が該当する。
私の方針 今回、初心者向けということで、以下の方針を採用することとした。
できるだけ安く ただし使用ソフトはWord できるだけ安く済ませるに越したことはない。特に初心者の場合、いきなり高価なソフトに手を出すのはあまり賢いやり方ではないであろう。
ただし、使用ソフトはWordを採用した2。これは、初心者の場合Wordが最も操作に慣れていると考えられたからである。もちろん、WordがなければLibreOfficeで代用して構わない。
注意 私の独断と偏見が多分に混じっていることを留意されたい。
フォント まずはフォントの選定からである。フォントは本文の印象を担う重要なファクターであり、慎重に選ぶ必要がある。フォントは商用のものを購入すると非常に高価なので、まずは無料フォントの中から選ぶことにする3。
結論から言ってしまえば、本文フォントは以下の4つのいずれかを使用するのが無難であろう。これらはすべて無料で使えるが、ただしヒラギノだけはMacにしか付いていない。
游明朝 ヒラギノ IPAex明朝 F910明朝W3-IPA 個人的には、MS明朝は避けたほうがよいと考えている。
MS明朝 MS明朝を使ってはならない理由は、端的に「読みづらい」からである。
そもそもMS明朝は小説向きのフォントではない。もともと、MS明朝は解像度の低いディスプレイ用に開発されたフォントであり、印刷向きではないのである。その証拠に、開発元のサイトを見ると、
そのころは、ディスプレイの解像度が低く、小さな画面で、いかに小さい文字まできれいに表示させるかということでいろいろな工夫をしました。
と書いてある。推測するに、MS明朝のひらがなが独特な形状をしている（直線が多用されていたり、少しばかり大きめだったりする）のは、解像度が低いディスプレイでも字が潰れず読めるように、という工夫だと思われる。
当時は大変役に立ったであろうそうした工夫は、我々の目指す「美しい小説本をつくる」という目的の前ではむしろ百害あって一理なしである。
游明朝 游明朝は、最も小説向きと言えるだろう。公式サイトには次のように書いてあり、小説用に開発されたフォントであることが明言されている。
游明朝体ファミリーは「時代小説が組めるような明朝体」をキーワードに、単行本や文庫などで小説を組むことを目的に開発した游明朝体Rを核とした明朝体ファミリーです。
游明朝は現在、Windows および Mac に標準で付属している。
なお、最新のMacには「游明朝体36ポかな」という仮名書体が付属している（游明朝の漢字部分と組み合わせて使う）。公式サイトを見ると、もともとは見出しフォントとしての使用を想定しているようである。したがって、本文フォントとして読みやすいのかどうか定かではない。場合によっては使ってみてもよいかもしれない。
ヒラギノ ヒラギノフォントは、とにかく美しいフォントである。ファンも多い。「ヒラギノを目当てにMacを買った」という人も結構いる（フォント単体を買うよりMacごと買ったほうが安いので、しばしば「ヒラギノを買ったらMacがついてきた」と表現される）。
個人的な意見では、小説よりは横書きの文書に適しているように思うが、縦書きの小説に使用してもさほど問題はなかろう。
Macにしか付属していないのがちょっと残念である。
IPAex明朝 独立行政法人情報処理推進機構（IPA）が作ったフォントである。無料でダウンロードできる。特に小説向きというわけでもないが、普通に本文書体として活用できるフォントである。
F910明朝W3-IPA 「現代的な骨格と古くからある味わいを融合した明朝体」とのことである。漢字部分は上で紹介した「IPAフォント」を、ひらがなやカタカナは「フォント910」という会社で作ったものを組み合わせて作られたフォントである。築地体というのか、仮名部分が古風な雰囲気なのが嬉しい。ただ本文に使うには、ちょっと仮名が大きいような気がしないでもない。
古風といえば「はんなり明朝」もIPAフォントの漢字に古風な仮名書体を合わせたフリーフォントだが、こちらは縦書きで使うと縦の線が揃わなくてあまり読みやすくない、という意見をどこかで見た気がする。真偽の程は定かではないが。美しさについては、最終的には自分の目で判断するしかないであろう。
版面設計 本文領域のレイアウトのことを、版面という。この版面設計こそが、小説本の読みやすさを左右する最重要の工程である。
基本的には、次の4点を決定することで、版面設計したことになる。
文字サイズ 行送りサイズ 1行あたりの文字数 1ページあたりの行数 文字サイズ 好きなフォントを選んだら、次に本文の文字サイズを決めよう。大きすぎても小さすぎてもいけない。基本的には市販の本を見て、それに合わせるのがよいだろう。
ところが、ここで我々はちょっとした壁にぶつかることになる。
実は、Wordでは市販の書籍の文字サイズを再現することができない！
どういうことか。
Wordで文字サイズといえば、「ポイント」という単位を使うのが普通である。例えばWordの標準設定では、本文の文字サイズは10.5ptである。一方、書籍で使用されている文字サイズは、ポイントではなく、「級（Q）」という単位で設定されているのである。これらは当然だが互いに換算可能で、例えば、「10pt」は約「14Q」である（これはちょうど、アメリカでは「1インチ」と呼ぶ長さを、日本では「2.54センチメートル」と呼ぶようなものである）。
さて、ここで問題なのは、Wordでは細かな文字サイズ指定ができないことである。例えば、私の手元にある角川文庫の本文サイズは「13Q」だが、これをWordで再現することはできない。「13Q」をポイントに換算すれば、大体「9.2pt」となるが、実は、Wordで「9.2pt」と指定することはできないのである。Wordは「9pt」「9.5pt」「10pt」のように、0.5ptずつしかサイズを変更できないからである。
したがって、Wordを使う以上、文字サイズに関しては市販の小説本を再現できない。諦めて、近い大きさを指定するほかない。ただし、たまたまぴったり換算できるときはある。例えば、「8.5pt = 12Q」であるから、本文を12QにすることはWordでもできる。
目安として、市販の小説本ではどういった文字サイズが採用されているか見てみよう。
ライトノベルは軒並み「11.5Q」であるらしい（らしい、というのは、私はあまりラノベを読まないからである）。ポイントで言えば「8.2pt」くらい。これはかなり小さめであり、本文で使うにはギリギリの大きさであろう。中高生向けである性格上、安価に生産すべく、文字を小さくして紙面を節約しているのだと思われる。 手元の角川文庫（綾辻行人『Another』）や平凡社ライブラリー（丹治信春『クワイン』）は恐らく「13Q」（適当に定規で計測しているので定かではないが）。ポイントでは「9.2pt」くらい。文庫本などで広く採用されているように思う。個人的には、本文サイズとしては最低でもこのくらいはほしい。 手元の新潮文庫（筒井康隆『七瀬ふたたび』）は多分、「13.5Q」。「9.6pt」くらい。 このように、市販の小説本は13Q～14Qくらいであることが多い。</description>
    </item>
    
    <item>
      <title>小説校正のための正規表現集</title>
      <link>https://qdaibungei.github.io/latex/documents/2016-10-09-kousei/</link>
      <pubDate>Sun, 09 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2016-10-09-kousei/</guid>
      <description>背景 小説集の編集をやっている。 インデントは全角空白で表現、ただし文頭が括弧の場合は空白不要、などの表記ルールを（明示はしていないが暗黙のうちに）定めている。 問題 著者たちはパソコンに熟達している人ばかりでなく、そのためインデント規則など表記ルールが守られていない原稿がよく送られてくる。 解法 以下のような正規表現を使って置換する。置換すべき項目がリストアップしてあると便利なので、以下に記しておく。上が検索文字列、下が置換後文字列。 インデントがないとき全角空白を挿入 ^([^　「『（〈【〔《［｛〝\n\\\\]) $1 括弧前に空白があれば削除 ^　([「『（〈【〔《［｛〝]) $1 文末の不要な空白を削除 [ ]+$ 半角括弧→全角括弧 \((.+?)\) （$1） 2連続で使用されている疑問符・感嘆符は半角に [！？]{2,} 単純なミスをあらかじめ検知 がが|のの|をを|にに|へへ|とと|でで|やや|かか|もも|はは その他 青空文庫作業マニュアル【校正編】は参考になる。</description>
    </item>
    
    <item>
      <title>校正割り振りスクリプト</title>
      <link>https://qdaibungei.github.io/latex/documents/2016-07-10-kousei-script/</link>
      <pubDate>Sun, 10 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2016-07-10-kousei-script/</guid>
      <description>はじめに 校正割り振りスクリプトをつくった。校正割り振りっていうより、「山分け問題」の解決をするスクリプトって言ったほうがいいか。というかこういう問題ってふつうどう呼ばれているのだろう。検索してもいまいちこれといったものが見つからなかった。「山分け問題」もしくは「分配問題」と呼んでいる本がgoogle booksで見つかったが、これが一般的呼称なのは分からない。
校正割り振りスクリプト 背景 文藝サークルでは、文集や部誌を発行するさい、校正係を置いている。 ここで校正係とは、部員の原稿を事前に読み、誤字脱字などをチェックする係である。 各校正係は、すべての原稿に目を通す必要はなく、自分の担当原稿のみに目を通せばよい（各人がすべての原稿に目を通すのは非効率的であるため）。 問題 校正係へ原稿を割り振るとき、各人が読まねばならぬ原稿の文字数をできるかぎり揃えたい。 しかし、これを手作業で揃えようとすると、面倒である。 解法 以下に示すpythonスクリプトを書いた。すべての可能な組み合わせを考えて、標準偏差を出し、標準偏差の最も低い組み合わせを出力するようにしてある。
# -*- coding: utf-8 -*- import math import itertools list1 = [1011,8595,5064,4978,6751,108,30218,732,&amp;#39;|&amp;#39;,&amp;#39;|&amp;#39;,&amp;#39;|&amp;#39;] junretu = [i for i in itertools.permutations(list1)] # すべての順列をひたすら出力 goodp = [] # good permitation listhozon = [] # list保存 # 標準偏差 standard deviation sd = -1 for p in junretu: list2 = [] p = list(p) i = [i for (i, x) in enumerate(p) if x == &amp;#39;|&amp;#39;] # 区切り位置の取得 # 取得した区切り位置を元に数字の組み合わせのリストを作る c = 0 for x in i: list2.</description>
    </item>
    
    <item>
      <title>LaTeX文書における余白の設定方法</title>
      <link>https://qdaibungei.github.io/latex/documents/2016-05-29-yohaku-settei/</link>
      <pubDate>Sun, 29 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2016-05-29-yohaku-settei/</guid>
      <description>この記事では、LaTeX文書における余白の設定方法を解説する。
目次 目次 横書きの場合 geometryパッケージ jlreq.cls hanmenパッケージ 手動で設定 縦書きの場合 jlreq.cls hanmenパッケージ 手動で設定 横書きの場合 geometryパッケージ 横書きの場合、geometryパッケージを使うのが便利だ。字数と行数を指定する場合は、プリアンブルに次のように書き込む。
% 45字×41行の設定にする \usepackage[textwidth=45zw,lines=41]{geometry} 字数・行数を指定するのではなく、余白を直接指定する場合、次のように書けばよい。
% 上下に2cm、左右に1cmの余白を取る \usepackage[top=2cm, bottom=2cm, left=1cm, right=1cm]{geometry} ターミナルで$ texdoc geometryを実行すれば、geometryパッケージのマニュアルを読むことができる。
jlreq.cls jlreq.clsを用いている場合、クラスオプションを用いて余白設定を行なうことができる。プリアンブルに次のように書き込む。
\documentclass[jafontsize=14Q, baselineskip=24.5H, line_length=45zw, number_of_lines=41]{jlreq} すると、
文字サイズ　14級 行送り　24.5歯 行長　45字 行数　41行 に設定することができる。字数・行数を指定するのではなく、余白の広さを直接指定する場合には、次のようにする。
% 上下に2cm、左右に1cmの余白を取る % head_space: 上部余白 % foot_space: 下部余白 % gutter: ノド余白（左とじの場合は左側の余白、右とじの場合は右側の余白） % fore-edge: 小口余白（ノドとは逆側の余白） \documentclass[head_space=2cm, foot_space=2cm, gutter=1cm, fore-edge=1cm]{jlreq} hanmenパッケージ 拙作のhanmenパッケージを用いても、余白の設定を行なえる。プリアンブルに次のように書き込む。
\usepackage[Q=10,H=15,W=38,L=40,ptj]{hanmen} そうすると、
文字サイズ　10pt 行送り　15pt 行長　38字 行数　40行 に設定できる。hanmenパッケージは縦書きにも対応しているので便利である。</description>
    </item>
    
    <item>
      <title>LaTeXにおける版面設計</title>
      <link>https://qdaibungei.github.io/latex/documents/2016-05-28-hanmen-sekkei/</link>
      <pubDate>Sat, 28 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2016-05-28-hanmen-sekkei/</guid>
      <description>はじめに 版面設計とは 普通、DTPでは、組版作業の最初に上下左右の余白を決めるということはしない。では何を最初に決めるのかというと、版面である。版面設計をこそ、最初にすべきなのである。
版面設計とは、本文領域のレイアウトを設計することである。具体的には、一行あたり何文字にするか、1ページあたり何行にするか、そして字の大きさはどれくらいかを指定する作業だ。
LaTeXにかぎらず、一般にDTPソフトで文章主体の冊子のレイアウトをつくるとき、普通、版面から設計する。余白を先に決めてしまうと、「一行あたり何文字にするか、1ページあたり何行にするか、そして字の大きさはどれくらいか」が、余白に制約されてしまうからである。
それでは、版面を設計する方法を解説しよう。この方法は、一見複雑そうに見えるが、LaTeXの余白決定の仕組みを理解するという意味でもお勧めできる方法である。
注意 なお、以下の内容をパッケージ化したものがhanmenパッケージである。逆に言うと、以下はhanmenパッケージの技術解説である。
版面設計の方法 字数と行数 以下、縦書きの場合を想定して版面設計の方法を解説しよう。
まずは字数と行数を設定してみよう。プリアンブルにつぎのように書いてみる。
% 字数と行数 \textwidth = 46zw \textheight = 19\baselineskip \advance\textheight by -1\baselineskip \advance\textheight by 1zw これで、本文を46字×19行で組むことができる。
\textwidth = 46zwは、字数の設定をしている部分である（縦の長さが46字ぶんになるよう設定している）。
（なお、=を用いるやり方は、TeXの記法である。LaTeXでは\setlength{\textwidth}{46zw}などとする。LaTeXの記法も悪くはないのだが、TeXの記法のほうが簡潔に書けるので今回はこちらを採用する。）
\textheight = 19\baselineskipは、行数の設定をしている部分である（横の長さが19ベースラインぶんになるよう設定している。1ページあたり19行となる）。なお\baselineskipとは、組版用語で「行送り」のことであり、「1字ぶんの長さ＋行間の長さ」のことである。
以上2つの設定で基本的にはOKだ。では、残り2行はなんなのか。残り2行は、ちょっとした調整である。これを文章で説明しようとすると面倒なので省略する。どうしてこれらが必要なのかは、この2行をコメントアウトさせてみれば簡単にわかるから、興味がある人は試みられたい。
なお、\textwidthと\textheightは逆ではないか、と思った人がいるかもしれない。\textheightと言いながら、そこで設定したのはテキスト領域の高さ（height）でなく横幅（width）だったからである。
本当は、読んで字のごとく、\textwidthとはテキスト領域の「横」幅を、\textheightとはテキスト領域の「縦」の長さを、それぞれ指すのである。しかし、ここで注意したいことは、縦書きLaTeXにおいて\textwidthと\textheightは役割が逆転してしまうということである。LaTeXはもともと、横書きのためのソフトだ。これを、いわばむりやり縦書きに利用しているので、縦横が逆転してしまうのである。したがって、たとえば\textwidthは、縦書きしているときにかぎり「テキスト領域の縦幅」を示すことになる。
版面を中央に持っていく それでは、つぎいこう。
じつは、字数と行数を指定しただけだと、テキスト領域が中央に来ず、端っこに寄った状態となってしまう。これはLaTeXの仕様上どうしようもない。
そういうわけで、今度は版面を中央に持っていく設定だ。まずは上下を中央に持っていこう。
% 版面を中央に（上下） \topmargin=\paperheight \advance\topmargin by -\textwidth \divide\topmargin by 2 \advance\topmargin by -1truein \advance\topmargin by -\headheight \advance\topmargin by -\headsep まず\topmargin=\paperheightによって、上部の余白の長さ（\topmargin）を、紙の縦の長さ（\paperheight。これは縦書きでも意味は逆にならない）に合わせる。
このままでは余白がありすぎる（というか紙面全部が余白となってしまう）のであるが、もちろんここから調整を重ねていって、徐々に望む結果に近づけてゆくのである。
続く2行が、その調整である。\topmarginから\textwidth（テキストの縦の長さ）を引く（\advance\topmargin by -\textwidth）。そののち、\topmargin÷2（\divide\topmargin by 2）をする。こうすれば、上と下の余白が同じになり、版面が上下中央に来る。
残りの、
\advance\topmargin by -1truein \advance\topmargin by -\headheight \advance\topmargin by -\headsep はなんなのかというと、まあこれもちょっとした調整だと思っていただきたい。たとえば\advance\topmargin by -1trueinというのを説明すると、実はLaTeX文書にはもともと1インチの余白が設けられている。なぜデフォルトで1インチも余白が空いているのか、意味がわからないのだが、とにかく空いているので、これを引く必要があるのだ。ほか2つもそういった感じのものだと思ってください。詳しくはLaTeX入門書でも見てください。</description>
    </item>
    
  </channel>
</rss>
