<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Documents on 文藝部LaTeX研究会</title>
    <link>https://qdaibungei.github.io/latex/documents/</link>
    <description>Recent content in Documents on 文藝部LaTeX研究会</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Mon, 01 Apr 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://qdaibungei.github.io/latex/documents/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>高品質なプロ仕様の有料フォント20種を300円足らずで入手する方法</title>
      <link>https://qdaibungei.github.io/latex/documents/2019-04-01-aprilfool/</link>
      <pubDate>Mon, 01 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2019-04-01-aprilfool/</guid>
      <description>そんな方法、知っているわけがないでしょう。終わり。

※本記事はエイプリルフールネタ用の記事です。</description>
    </item>
    
    <item>
      <title>和文フォントを混植する方法</title>
      <link>https://qdaibungei.github.io/latex/documents/2019-03-31-konsyoku/</link>
      <pubDate>Sun, 31 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2019-03-31-konsyoku/</guid>
      <description>はじめに 和文フォントは、平仮名や片仮名だけ別のフォントに置き換えて使用することがある。漢字は同じでも、平仮名が違えば、紙面の印象を大きく変えることができるからだ。このように、漢字と平仮名とで別のフォントを使うことを「混植」と言う。
LaTeXで混植をする方法の解説としては、これまでにも優れた記事がいくつか存在している。例えば「ヒラギノ明朝W2と游築五号仮名W2混植方法」など。しかしそこに書かれた方法は、いくぶんか簡略的なものだというきらいがある。otfパッケージのburasageオプションが使えなかったり、upLaTeXでは使えなかったりするのだ。
そこで本稿では、上述の欠点への補足として、やや備忘録的に記事を書いてみたい。
必要なファイルの用意 まず、必要なファイルを揃えておこう。ここでは游明朝体と游明朝体五号かなの混植をしてみよう。
CTANにあるjapanese-otfパッケージからbaseplとscriptというディレクトリをダウンロード。またmkjvfもダウンロードしておく。
同様にjapanese-otf-uptexからbasepl、script、umkjvfをダウンロード。
さらに次のスクリプトを作成する。
#!/bin/sh  mkdir tfm mkdir vf # 普通にtfmファイルを生成 for face in r b do for hv in h v do ppltotf basepl/base-${hv}.pl yumin5go${face}-${hv} ppltotf basepl/base-${hv}.pl expyumin5go${face}-${hv} ppltotf basepl/brsg-${hv}.pl brsgyumin5go${face}-${hv} ppltotf basepl/brsg-${hv}.pl brsgexpyumin5go${face}-${hv} #  uppltotf -kanji=uptex basepl/ubase-${hv}.pl upyumin5go${face}-${hv} uppltotf -kanji=uptex basepl/ubase-${hv}.pl upexpyumin5go${face}-${hv} uppltotf -kanji=uptex basepl/ubrsg-${hv}.pl upbrsgyumin5go${face}-${hv} uppltotf -kanji=uptex basepl/ubrsg-${hv}.pl upbrsgexpyumin5go${face}-${hv} done done # ここが混植のキモ。 # 混植しないときは引数二つでよかったが、混植のため引数は三つ。 # しかし仕組みはあまり理解できていない。 for face in r b do for hv in h v do perl mkjvf -m yumin5go${face}-${hv} hmin${face}-${hv} r-yumin5go${face}-${hv} perl mkjvf -m -sage brsgyumin5go${face}-${hv} hmin${face}-${hv} r-yumin5go${face}-${hv} perl mkjvf -m -expert expyumin5go${face}-${hv} hmin${face}-${hv} cidjmin${face} perl mkjvf -m -sage -expert brsgexpyumin5go${face}-${hv} hmin${face}-${hv} cidjmin${face} done done for face in r b do for hv in h v do perl umkjvf -m -ucs -sp 1 upyumin5go${face}-${hv} uphmin${face}-${hv} r-upyumin5go${face}-${hv} perl umkjvf -m -ucs -sp 1 -sage upbrsgyumin5go${face}-${hv} uphmin${face}-${hv} r-upyumin5go${face}-${hv} perl umkjvf -m -ucs -sp 1 -expert upexpyumin5go${face}-${hv} uphmin${face}-${hv} cidjmin${face} perl umkjvf -m -ucs -sp 1 -sage -expert upbrsgexpyumin5go${face}-${hv} uphmin${face}-${hv} cidjmin${face} done done echo &amp;#34;making tfm for supplementary plane .</description>
    </item>
    
    <item>
      <title>jfontsパッケージ</title>
      <link>https://qdaibungei.github.io/latex/documents/2019-03-30-jfonts/</link>
      <pubDate>Sat, 30 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2019-03-30-jfonts/</guid>
      <description> はじめに LaTeXでPDFに和文フォントを埋め込む際、いちいちmapファイルを書き換えるのは面倒である。そこでjfontsパッケージというLaTeXパッケージを作った。簡単な工夫だが、役に立つ。
jfontsパッケージは、otfパッケージと併用することを前提としている。フォントを変えたいときはフォントのファイル名を書き換えればよい。
jfonts.sty % % jfonts.sty %  \NeedsTeXFormat{pLaTeX2e} \ProvidesPackage{jfonts} \def\jf@hminl{ToppanBunkyuMincho-Regular.otf} \def\jf@hminr{HiraMinProN-W3.otf} \def\jf@hminb{HiraMinProN-W6.otf} \def\jf@hgothr{HiraKakuProN-W3.otf} \def\jf@hgothb{HiraKakuProN-W6.otf} \def\jf@hgotheb{HiraKakuStdN-W8.otf} \def\jf@hmgothr{HiraMaruPro-W4.otf} \AtBeginDvi{%  % TEXT, 90JIS  \special{pdf:mapline hminl-h H \jf@hminl}%  \special{pdf:mapline hminl-v V \jf@hminl}%  \special{pdf:mapline hminr-h H \jf@hminr}%  \special{pdf:mapline hminr-v V \jf@hminr}%  \special{pdf:mapline hminb-h H \jf@hminb}%  \special{pdf:mapline hminb-v V \jf@hminb}%  \special{pdf:mapline hgothr-h H \jf@hgothr}%  \special{pdf:mapline hgothr-v V \jf@hgothr}%  \special{pdf:mapline hgothb-h H \jf@hgothb}%  \special{pdf:mapline hgothb-v V \jf@hgothb}%  \special{pdf:mapline hgotheb-h H \jf@hgotheb}%  \special{pdf:mapline hgotheb-v V \jf@hgotheb}%  \special{pdf:mapline hmgothr-h H \jf@hmgothr}%  \special{pdf:mapline hmgothr-v V \jf@hmgothr}%  % TEXT, JIS04  \special{pdf:mapline hminln-h H \jf@hminl}%  \special{pdf:mapline hminln-v V \jf@hminl}%  \special{pdf:mapline hminrn-h H \jf@hminr}%  \special{pdf:mapline hminrn-v V \jf@hminr}%  \special{pdf:mapline hminbn-h H \jf@hminb}%  \special{pdf:mapline hminbn-v V \jf@hminb}%  \special{pdf:mapline hgothrn-h H \jf@hgothr}%  \special{pdf:mapline hgothrn-v V \jf@hgothr}%  \special{pdf:mapline hgothbn-h H \jf@hgothb}%  \special{pdf:mapline hgothbn-v V \jf@hgothb}%  \special{pdf:mapline hgothebn-h H \jf@hgotheb}%  \special{pdf:mapline hgothebn-v V \jf@hgotheb}%  \special{pdf:mapline hmgothrn-h H \jf@hmgothr}%  \special{pdf:mapline hmgothrn-v V \jf@hmgothr}%  % CID  \special{pdf:mapline otf-cjml-h Identity-H \jf@hminl}%  \special{pdf:mapline otf-cjml-v Identity-V \jf@hminl}%  \special{pdf:mapline otf-cjmr-h Identity-H \jf@hminr/AJ16}%  \special{pdf:mapline otf-cjmr-v Identity-V \jf@hminr/AJ16}%  \special{pdf:mapline otf-cjmb-h Identity-H \jf@hminb/AJ16}%  \special{pdf:mapline otf-cjmb-v Identity-V \jf@hminb/AJ16}%  \special{pdf:mapline otf-cjgr-h Identity-H \jf@hgothr}%  \special{pdf:mapline otf-cjgr-v Identity-V \jf@hgothr}%  \special{pdf:mapline otf-cjgb-h Identity-H \jf@hgothb}%  \special{pdf:mapline otf-cjgb-v Identity-V \jf@hgothb}%  \special{pdf:mapline otf-cjge-h Identity-H \jf@hgotheb/AJ16}%  \special{pdf:mapline otf-cjge-v Identity-V \jf@hgotheb/AJ16}%  \special{pdf:mapline otf-cjmgr-h Identity-H \jf@hmgothr/AJ16}%  \special{pdf:mapline otf-cjmgr-v Identity-V \jf@hmgothr/AJ16}%  % Unicode 90JIS  \special{pdf:mapline otf-ujml-h UniJIS-UTF16-H \jf@hminl}%  \special{pdf:mapline otf-ujml-v UniJIS-UTF16-V \jf@hminl}%  \special{pdf:mapline otf-ujmr-h UniJIS-UTF16-H \jf@hminr}%  \special{pdf:mapline otf-ujmr-v UniJIS-UTF16-V \jf@hminr}%  \special{pdf:mapline otf-ujmb-h UniJIS-UTF16-H \jf@hminb}%  \special{pdf:mapline otf-ujmb-v UniJIS-UTF16-V \jf@hminb}%  \special{pdf:mapline otf-ujgr-h UniJIS-UTF16-H \jf@hgothr}%  \special{pdf:mapline otf-ujgr-v UniJIS-UTF16-V \jf@hgothr}%  \special{pdf:mapline otf-ujgb-h UniJIS-UTF16-H \jf@hgothb}%  \special{pdf:mapline otf-ujgb-v UniJIS-UTF16-V \jf@hgothb}%  \special{pdf:mapline otf-ujge-h UniJIS-UTF16-H \jf@hgotheb}%  \special{pdf:mapline otf-ujge-v UniJIS-UTF16-V \jf@hgotheb}%  \special{pdf:mapline otf-ujmgr-h UniJIS-UTF16-H \jf@hmgothr}%  \special{pdf:mapline otf-ujmgr-v UniJIS-UTF16-V \jf@hmgothr}%  % Unicode JIS04  \special{pdf:mapline otf-ujmln-h UniJIS2004-UTF16-H \jf@hminl}%  \special{pdf:mapline otf-ujmln-v UniJIS2004-UTF16-V \jf@hminl}%  \special{pdf:mapline otf-ujmrn-h UniJIS2004-UTF16-H \jf@hminr}%  \special{pdf:mapline otf-ujmrn-v UniJIS2004-UTF16-V \jf@hminr}%  \special{pdf:mapline otf-ujmbn-h UniJIS2004-UTF16-H \jf@hminb}%  \special{pdf:mapline otf-ujmbn-v UniJIS2004-UTF16-V \jf@hminb}%  \special{pdf:mapline otf-ujgrn-h UniJIS2004-UTF16-H \jf@hgothr}%  \special{pdf:mapline otf-ujgrn-v UniJIS2004-UTF16-V \jf@hgothr}%  \special{pdf:mapline otf-ujgbn-h UniJIS2004-UTF16-H \jf@hgothb}%  \special{pdf:mapline otf-ujgbn-v UniJIS2004-UTF16-V \jf@hgothb}%  \special{pdf:mapline otf-ujgen-h UniJIS2004-UTF16-H \jf@hgotheb}%  \special{pdf:mapline otf-ujgen-v UniJIS2004-UTF16-V \jf@hgotheb}%  \special{pdf:mapline otf-ujmgrn-h UniJIS2004-UTF16-H \jf@hmgothr}%  \special{pdf:mapline otf-ujmgrn-v UniJIS2004-UTF16-V \jf@hmgothr}% }% \if@otf@uplatex \AtBeginDvi{%  % TEXT, 90JIS  \special{pdf:mapline uphminl-h UniJIS-UTF16-H \jf@hminl}%  \special{pdf:mapline uphminl-v UniJIS-UTF16-V \jf@hminl}%  \special{pdf:mapline uphminr-h UniJIS-UTF16-H \jf@hminr}%  \special{pdf:mapline uphminr-v UniJIS-UTF16-V \jf@hminr}%  \special{pdf:mapline uphminb-h UniJIS-UTF16-H \jf@hminb}%  \special{pdf:mapline uphminb-v UniJIS-UTF16-V \jf@hminb}%  \special{pdf:mapline uphgothr-h UniJIS-UTF16-H \jf@hgothr}%  \special{pdf:mapline uphgothr-v UniJIS-UTF16-V \jf@hgothr}%  \special{pdf:mapline uphgothb-h UniJIS-UTF16-H \jf@hgothb}%  \special{pdf:mapline uphgothb-v UniJIS-UTF16-V \jf@hgothb}%  \special{pdf:mapline uphgotheb-h UniJIS-UTF16-H \jf@hgotheb}%  \special{pdf:mapline uphgotheb-v UniJIS-UTF16-V \jf@hgotheb}%  \special{pdf:mapline uphmgothr-h UniJIS-UTF16-H \jf@hmgothr}%  \special{pdf:mapline uphmgothr-v UniJIS-UTF16-V \jf@hmgothr}%  % TEXT, JIS04  \special{pdf:mapline uphminln-h UniJIS2004-UTF16-H \jf@hminl}%  \special{pdf:mapline uphminln-v UniJIS2004-UTF16-V \jf@hminl}%  \special{pdf:mapline uphminrn-h UniJIS2004-UTF16-H \jf@hminr}%  \special{pdf:mapline uphminrn-v UniJIS2004-UTF16-V \jf@hminr}%  \special{pdf:mapline uphminbn-h UniJIS2004-UTF16-H \jf@hminb}%  \special{pdf:mapline uphminbn-v UniJIS2004-UTF16-V \jf@hminb}%  \special{pdf:mapline uphgothrn-h UniJIS2004-UTF16-H \jf@hgothr}%  \special{pdf:mapline uphgothrn-v UniJIS2004-UTF16-V \jf@hgothr}%  \special{pdf:mapline uphgothbn-h UniJIS2004-UTF16-H \jf@hgothb}%  \special{pdf:mapline uphgothbn-v UniJIS2004-UTF16-V \jf@hgothb}%  \special{pdf:mapline uphgothebn-h UniJIS2004-UTF16-H \jf@hgotheb}%  \special{pdf:mapline uphgothebn-v UniJIS2004-UTF16-V \jf@hgotheb}%  \special{pdf:mapline uphmgothrn-h UniJIS2004-UTF16-H \jf@hmgothr}%  \special{pdf:mapline uphmgothrn-v UniJIS2004-UTF16-V \jf@hmgothr}%  }% \fi</description>
    </item>
    
    <item>
      <title>CTANにない欧文フォントをLaTeXにインストールする</title>
      <link>https://qdaibungei.github.io/latex/documents/2019-03-29-font-install/</link>
      <pubDate>Fri, 29 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2019-03-29-font-install/</guid>
      <description>はじめに upLaTeXにおいて、CTANに存在する欧文フォントをインストールするのは容易だ。しかしCTANに存在しないフォントをインストールするのは難しい。
困難の原因は、二つある。第一は、tfmファイルやmapファイルを生成するのが難しいことである。第二は、フォント設定ファイルの作り方が分かりづらいことである。
そこで、備忘録を兼ね、以下にその方法を記す。
一つのウェイトをインストールしてみる tfmなどの生成 フォントの形式は通常、otfやttfなどであるが、TeXはそれらを直接に扱うことができない。そこでtfmファイルなどのフォントファイルを生成する必要がある。面倒だが、フォントごとに別のtfmを生成せねばならない。
tfmを生成するためには「otftotfm」というソフトを使う。otftotfmはふつうTeXをインストールしたときに一緒にインストールされているはずだ。インストールされているかどうかを確認するためには、ターミナルで「otftotfm &amp;ndash;version」と打ち、ヴァージョン情報が返ってくるかどうかを確かめればよい。
さて今回はGoogle Fontsに収録されているJosefin Slabというフォントをインストールしてみよう。まずは、一つのウェイト（Regular）だけをインストールしてみる。
まず作業用ディレクトリを適当に作っておき、そこにJosefinSlab-Regular.ttfを入れておく。ターミナルで作業用ディレクトリに行き、次のコマンドを実行してみよう。
otftotfm --no-type1 --no-dotlessj --mapfile=josefinslab.map -e ec.enc -n josefinslab-regular JosefinSlab-Regular.ttf すると、○○○.tfm、○○○.vf、○○○.map、○○○.encという四種類のファイルが生成されるはずである1。一応、オプションの意味を説明しておこう。
 --no-type1 --no-dotlessjは、「Type 1フォントへの変換を行わない」ということ、らしい。あまり理解できていない。 --mapfile=josefinslab.mapで、mapファイルの指定をする。 -e ec.encは、エンコーディングファイルの指定。ec.encを指定すると、T1エンコーディングになる。ちなみにtexnansi.encを指定するとLY1エンコーディングになる。エンコーディングって何なのかいまいち分かっていないが、私はT1エンコーディングにしておいて困ったことはない。 -n josefinslab-regularは、tfm名の指定。  また、-fkernとすればカーニングの、-fligaとすればリガチャの情報を、tfmに含ませることができる。Josefin Slabにはこれらの機能がなかったから上ではこのオプションをつけていないが、この機能があればつけたほうがよい。otfinfo -f JosefinSlab-Regular.ttfなどとすれば、どのような機能が備わっているかを確認できる。
styファイルの作成 各種ファイルが生成できたならば、すかさず、josefinslab.styという名前でstyファイルを作る。
% % josefinslab.sty % \AtBeginDvi{\special{pdf:mapfile josefinslab.map}}% 先程生成したmapファイルの読み込み \DeclareFontFamily{T1}{josefinslab}{}% TeXファイル内で使うフォント名を設定 \DeclareFontShape{T1}{josefinslab}{m}{n}{&amp;lt;-&amp;gt; josefinslab-regular}{}% 上で設定したフォント名と、先程生成したtfmファイルとを結びつける \endinput インストールできたかを確認 ここまでできたら、ほとんどインストールは完了したと言ってよい（今のままだと、各種ファイルがディレクトリにたくさん散らばっていて、気持ち悪いかもしれないが、この問題は次の節で解決する）。
動作確認のため、作業用ディレクトリにTeXファイルを作って、フォントが埋め込まれるかをチェックしておこう。
\documentclass[uplatex]{jsarticle} \usepackage{josefinslab} \begin{document} \romanfamily{josefinslab}\selectfont This is a test. \end{document} 「This is a test.」がJosefin Slabで表示されたら、ここまでの作業はうまくいったことになる。</description>
    </item>
    
    <item>
      <title>hanmenパッケージを更新した</title>
      <link>https://qdaibungei.github.io/latex/documents/2018-01-18-hanmen/</link>
      <pubDate>Thu, 18 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2018-01-18-hanmen/</guid>
      <description> はじめに hanmenパッケージを一年ぶりくらいに更新した。使いかたはここに記してある。
変更した点  依存パッケージとして必須だったnombre_for_fancyhdr.styは、今回の変更により、必要なくなった。 Wオプションに非整数値を入れることができるようになった。これにより、段間を2.5文字分にするといった組版が可能となった。 Wオプションの挙動変更に伴い、グリッド線を表示するオプションの使いかたが変更された。これまでは\newhanmen{grid}と指定したが、今回から\newhanmen{g=50}というふうに指定する仕様とした。  </description>
    </item>
    
    <item>
      <title>otfパッケージのぶら下げ組をちょっと改良する</title>
      <link>https://qdaibungei.github.io/latex/documents/2018-01-12-burasage/</link>
      <pubDate>Fri, 12 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2018-01-12-burasage/</guid>
      <description> 緒言 本稿は、otfパッケージによるぶら下げ組を改良するための方法を記すものである。
本論 otfパッケージにはburasageオプションがあり、これを利用するとぶら下げ組ができる。
\usepackage[burasage]{otf} しかし、このぶら下げ組にはひとつ問題がある。句読点が行末に来たとき、必ずぶら下げ処理がおこなわれてしまうのである1。
むろん、これはこれでひとつの立派な組版方針である。だが、行長が短いときに強制的にぶら下げ処理がおこなわれてしまうと、字間が開いてしまい、間延びした印象の組みかたになってしまう。よって、われわれとしては、ぶら下げ処理を少し抑制するように修正してみたい。これは、商業出版の本によく見られる組みかたでもある。
そこで、プリアンブルなどに以下のように記述し、\。と\、というマクロを作る。
\if@burasage \def\、{%  \@ifnextchar\par{、}{、\hbox{}}%  }%  \def\。{%  \@ifnextchar\par{。}{。\hbox{}}%  }% \else \def\、{\nobreak\makebox[1zw][l]{、}}%  \def\。{\nobreak\makebox[1zw][l]{。}}% \fi あとは、文章中の句読点すべてを\。および\、で置き換えればよい。すると、burasageオプション時には適度にぶら下げが抑制された組みかたとなる。また、burasageオプションを外したときには、追い出し組となる。
細かい調整 ただし、このままでは句読点と括弧類とが並んだとき、空きが広くなりすぎてしまう。たとえば、\。「のように、句読点の直後に始め括弧が来た場合、\。\&amp;lt;「とする（つまり\&amp;lt;を追加する）ことが必要となる。
句点と鉤括弧の場合だけ考えると、結局、以下のような置換が必要である。
 \。「 → \。\&amp;lt;「 \。」 → 。」 」\。 → 」\&amp;lt;\。  このような置換を、すべての括弧類と句読点との組み合わせを考えて、おこなえばよい。置換作業は手作業だと面倒きわまりないので、PythonなりRubyなりで置換スクリプトを組んで置換するのがよいであろう。
結言 LaTeXのデフォルトは追い込み組であるが、これは商業出版にはあまり見られない。そこで上のような設定をし、ぶら下げ組にするか、追い出し組にするとよいのである。そうすれば、いっそう商業出版に近い組みかたが実現でき、嬉しい気分に浸れることであろう。
 ただし段落末尾はそのかぎりではない。 ↩   </description>
    </item>
    
    <item>
      <title>LaTeXによる小説誌制作のヒント</title>
      <link>https://qdaibungei.github.io/latex/documents/2017-10-12-book-making-hints/</link>
      <pubDate>Thu, 12 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2017-10-12-book-making-hints/</guid>
      <description>緒言 以下では、小説誌制作をLaTeXでおこなう場合のヒントを述べる。
フォントの指定 LaTeXのデフォルトフォントはあまり小説向きではない。そこで以下のように記述しフォントを変更する。
まず日本語フォントであるが、これは游明朝がよい。游明朝を使うには、以下のように書く（uplatexを使うことを前提として。いまどきわざわざplatexを使う理由はあるまい）。
% uplatexでA5サイズの本を作る場合のdocumentclassの書きかた \documentclass[a5paper,papersize,uplatex]{jsbook} % 日本語フォントを游明朝にする \usepackage[deluxe,uplatex]{otf} \AtBeginDvi{\special{pdf:mapfile otf-up-yu-win10.map}} 欧文フォントも変更しておこう。
% 欧文フォントの変更 \usepackage[scale=0.95]{fbb} \usepackage[scale=0.95,defaultsans]{opensans} jdashパッケージ 游明朝だと、ダッシュ――がつながらない。そこでjdashパッケージを導入し、これを使う。jdashパッケージについてはここを参照のこと。
hanmenパッケージの使用 まず以下の二つのファイルをダウンロードし、TeXファイルと同じフォルダへ入れる。
 hanmen.sty nombre_for_fancyhdr.sty  そしてプリアンブルに以下を記述する。
% 上のフォント設定をした後に書く \usepackage[Q=13,H=22,W=49,L=21,ko=3.875truemm,te=6.5truemm,footskip=2.47truemm,tate]{hanmen} % ついでに、欧文のベースラインなどを適当に変更しておこう \tbaselineshift=.3zw \kanjiskip=0pt plus .25zw minus 0zw \xkanjiskip=.25zw plus .083333zw minus 0zw これで厳密な版面の設定が可能となる。厳密というのは、たとえば表と裏とで行が揃っているということである（厳密な設定をしないと、行がズレる。紙を透かして見ると行がズレているかどうか分かる）。
\tcyマクロ LaTeXで縦書きをするさい、縦中横には\rensujiを使うよう言われる。しかし\rensujiだと前後のアキがおかしくなる（たとえば、行頭で\rensujiを使うとインデント量が狂う）。そこで\tcy命令を新たに作り、これを使うのがよい。
\usepackage{plext} \makeatletter \chardef\nvlsty@zenkakuSpace=\jis&amp;#34;2121\relax \newcommand{\tcy}[1]{%  \nvlsty@zenkakuSpace\kern-1zw\relax \leavevmode\hbox to 1zw{%  \centering\rensuji*{#1}\relax }\relax \kern-1zw\nvlsty@zenkakuSpace } \makeatother 以上をプリアンブルなどに書いておく。使いかたは至ってかんたんで、\tcy{12}時、のようにすればよい。
禁則処理の設定 縦書きの場合、禁則処理はほどほどに抑制しておくと商業出版物の組版に似せることができる。プリアンブルなどに以下を記述する。
\clubpenalty=0 \widowpenalty=0 \jcharwidowpenalty=0 \displaywidowpenalty=0 \prebreakpenalty\jis&amp;#34;2147=10000 % 5000 ’ \postbreakpenalty\jis&amp;#34;2148=10000 % 5000 “ \prebreakpenalty\jis&amp;#34;2149=10000 % 5000 ” \inhibitxspcode`〒=2 \prebreakpenalty\jis&amp;#34;2133=10000 \prebreakpenalty\jis&amp;#34;2134=10000 \prebreakpenalty\jis&amp;#34;2135=10000 \prebreakpenalty\jis&amp;#34;2136=10000 \prebreakpenalty`ー=0 \prebreakpenalty`ぁ=0 \prebreakpenalty`ぃ=0 \prebreakpenalty`ぅ=0 \prebreakpenalty`ぇ=0 \prebreakpenalty`ぉ=0 \prebreakpenalty`っ=0 \prebreakpenalty`ゃ=0 \prebreakpenalty`ゅ=0 \prebreakpenalty`ょ=0 \prebreakpenalty\jis&amp;#34;246E=0 %ゎ \prebreakpenalty`ァ=0 \prebreakpenalty`ィ=0 \prebreakpenalty`ゥ=0 \prebreakpenalty`ェ=0 \prebreakpenalty`ォ=0 \prebreakpenalty`ッ=0 \prebreakpenalty`ャ=0 \prebreakpenalty`ュ=0 \prebreakpenalty`ョ=0 \prebreakpenalty\jis&amp;#34;256E=0 %ヮ \prebreakpenalty\jis&amp;#34;2575=0 %ヵ \prebreakpenalty\jis&amp;#34;2576=0 %ヶ \prebreakpenalty\jis&amp;#34;2139=0 %々 フッター 『どこにもりんごがない』を組版したときのフッターの設定はだいたいこんな感じである。</description>
    </item>
    
    <item>
      <title>LaTeXによるPDFの生成と加工</title>
      <link>https://qdaibungei.github.io/latex/documents/2017-09-27-pdfpages/</link>
      <pubDate>Wed, 27 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2017-09-27-pdfpages/</guid>
      <description>緒言 本稿はLaTeXを用いてPDFを生成・加工する方法を示すものである。
Adobeの有料ソフトを使うならばPDF加工は容易であるが、無償のソフトウェアだけを用いてPDFを加工するのは通常難しい。しかし、LaTeXを用いれば無償でかんたんにPDFを加工できる。それを実現するのがpdfpagesパッケージである。
そこで以下ではpdfpagesパッケージの使いかたをかんたんに記すことにする（ただし自分用メモとしての意味合いが強く、きちんとは解説していない）。
pdfpagesパッケージの使いかた 大きさを指定して画像をPDF化する 以下をhoge.texという拡張子で保存し、pdflatex hoge.texとすればhoge.pdfというPDFファイルが生成される。
\documentclass{article} \usepackage{pdfpages} \usepackage[papersize={308.341truemm,216truemm}]{geometry} \begin{document} \includepdf{image.jpg} \end{document} \includepdfという命令で画像ファイルを読み込み、出力しているだけである。geometryパッケージにより画像の縦横の長さを設定することが可能である。
縦横比そのままに画像をPDF化する \documentclass{article} \usepackage{pdfpages} \begin{document} \includepdf[fitpaper]{image.jpg} \end{document} このようにfitpaperオプションつきで画像を読み込むと、画像の縦横比に合わせて用紙サイズが決定される。
PDFファイルの連結 以下はA5サイズの本を作っているとき、左右のページをつなげてA4用紙に出力するやりかたである。デザインを確認したいときなどに有用である。
\documentclass[a4paper,landscape]{article} \usepackage{pdfpages} \begin{document} \includepdf[pages={28,29},nup=2x1]{mybook.pdf} \end{document} pages={28,29}は28～29ページだけを読み込む設定、nupは複数ページを一枚に並べる設定である。nup=2x1は2行×1列で並べるという意味になる。
自炊したPDFファイルの加工と連結 \documentclass{article} \usepackage{pdfpages} \usepackage[a5paper]{geometry} \begin{document} \includepdf[pages=-,scale=1.25,offset=-14mm -23mm]{1.pdf} \includepdf[pages=-,scale=1.25,offset=-14mm -23mm]{2.pdf} \includepdf[pages=-,scale=1.25,offset=-14mm -23mm]{3.pdf} \includepdf[pages=-,scale=1.25,offset=-14mm -23mm]{4.pdf} \includepdf[pages=-,scale=1.25,offset=-14mm -23mm]{5.pdf} \includepdf[pages=-,scale=1.25,offset=-14mm -23mm]{6.pdf} \includepdf[pages=-,scale=1.25,offset=-14mm -23mm]{7.pdf} \end{document}\documentclass{article} \usepackage{pdfpages} \usepackage[a4paper,landscape]{geometry} \newcount\K \newcommand{\createPDF}{%  \K=0 \loop\ifnum\K&amp;lt;134 % while(K&amp;lt;pagecount)  \includepdf[pages=-,scale=1.15,offset=-12mm 2mm]{\the\K.png} \advance\K by 1 % K++  \repeat % end while } \begin{document} \createPDF \end{document} scaleオプションとoffsetオプションを指定してやると周囲の切り落としが可能となる。</description>
    </item>
    
    <item>
      <title>TeX Gyreフォントの使い方</title>
      <link>https://qdaibungei.github.io/latex/documents/2017-08-11-texgyre/</link>
      <pubDate>Fri, 11 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2017-08-11-texgyre/</guid>
      <description>TeX Gyreのパッケージ名をすぐ忘れてしまうのでメモしておく。
TeX Gyreフォント Adventor URW Gothic LにもとづくITC Avant Garde Gothic代用フォント。
\usepackage[scale=0.9]{tgadventor} ファミリ名はqagである。
Bonum URW Bookman LにもとづくITC Bookman代用フォント。
\usepackage[scale=0.95]{tgbonum} ファミリ名はqbkである。
Chorus URW Chancery L Medium ItalicにもとづくITC Zapf Chancery代用フォント。
\usepackage[scale=0.95]{tgbonum} ファミリ名はqzcである。
Cursor URW Nimbus Mono LにもとづくCourier代用フォント。
\usepackage[scale=1]{tgcursor} ファミリ名はqcrである。
Heros URW Nimbus Sans LにもとづくHelvetica代用フォント。
\usepackage[scale=0.95]{tgheros} ファミリ名はqhvである。
Pagella URW Palladio LにもとづくPalatino代用フォント。
\usepackage{tgpagella} ファミリ名はqplである。
Schola URW Century Schoolbook LにもとづくCentury Schoolbook代用フォント。
\usepackage[scale=1]{tgschola} ファミリ名はqcsである。
数式はfourierncと合わせる（tgscholaより先に読み込む）。
Termes URW Nimbus Roman LにもとづくTimes代用フォント。
\usepackage{qtxmath} % 数式を使う場合これを先に読み込む \usepackage[scale=1]{tgtermes} ファミリ名はqtmである。</description>
    </item>
    
    <item>
      <title>ロゴ作成</title>
      <link>https://qdaibungei.github.io/latex/documents/2017-04-03-logo/</link>
      <pubDate>Mon, 03 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2017-04-03-logo/</guid>
      <description>LaTeXで適当にロゴというかバナーみたいなものを作った。
　ソースは以下。
\documentclass{jsarticle} \usepackage[deluxe,expert]{otf} \usepackage[tate,grid]{hanmen} \usepackage{fbb} \usepackage{tsuku,xsceycmd,vtmacro,pxrubrica} \usepackage[dvipdfmx]{graphicx,xcolor} \begin{document} \definecolor{light-gray}{gray}{0.5} \definecolor{tomato}{HTML}{FF6347} \gyoaki[5] \kanjifamily{tsukumin}\selectfont \ruby[h]{文藝}{ぶん|げい}\ruby[h]{部}{ぶ} \hskip.45zw \tcy{\textcolor{light-gray}{\LaTeX}}\kern-1.2zw{\kanjiseries{bx}\fontsize{5\bQ}{8H}\selectfont\textcolor{tomato}{ラ テ フ}} \hskip.18zw \ruby[h]{研究}{けん|きゆ}\ruby[||-&amp;gt;]{会}{うかい} \end{document}</description>
    </item>
    
    <item>
      <title>版面数値計算</title>
      <link>https://qdaibungei.github.io/latex/documents/2017-03-28-layoutcal/</link>
      <pubDate>Tue, 28 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2017-03-28-layoutcal/</guid>
      <description>版面の数値を計算するプログラムをJavaScriptで作った。
layoutcal.html
使い方はリンク先に書いてある。デザインをもう少し洗練させたかったが、デザイン力がないのでこのままで公開。</description>
    </item>
    
    <item>
      <title>Wordの傍点を青空文庫形式に変換する方法</title>
      <link>https://qdaibungei.github.io/latex/documents/2017-03-19-bouten/</link>
      <pubDate>Sun, 19 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2017-03-19-bouten/</guid>
      <description>以下の画像を参考に置換する。
　置換用文字列は以下をコピペするとよい。
? ^&amp;amp;［＃「^&amp;amp;」に傍点］</description>
    </item>
    
    <item>
      <title>LaTeXによる小説組版法（初級）</title>
      <link>https://qdaibungei.github.io/latex/documents/2017-02-26-latexnovel/</link>
      <pubDate>Sun, 26 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2017-02-26-latexnovel/</guid>
      <description>この記事は、LaTeXで小説を組版するにはどうすればよいかを具体的に解説するものである。理論的な話は最小限に留め、主として実践的な話題を取り上げる。つまり、具体的にどう手を動かせばLaTeXで小説が組版できるのかを解説する。
コンピュータおよびLaTeXの初心者でも読めるように配慮したつもりだが、LaTeXの知識ゼロだと厳しいかもしれない。
なお、以下の方法はあくまでも初心者向けの簡易的方法であり、私が普段LaTeXで組版している実際の現場の方法とはかなり異なる。
電撃文庫の再現 雛形ファイルの用意 具体例として、LaTeXで電撃文庫のデザインで組版してみよう。といっても商用フォントが手元にない限り完全再現はできないので、大体同じようなデザインを作るだけであるが。
まず、以下を novelstyle.sty という名前で保存する。スタイルファイル内の記述の意味は、一応コメント文で書いておいた。
 　次に、以下の文字列を novel.tex という名で保存する。これが雛形ファイルとなる。
\documentclass[a6paper,papersize,autodetect-engine]{jsbook} \usepackage{novelstyle} \begin{document} （ここに本文を書く） \end{document} 最後に、hanmen.styもダウンロードしておく。
以上のファイルはすべて同じフォルダに入れておく。
PDFファイルの生成 さて、あとは先程の雛形ファイルをPDF化できれば、ひとまずは成功である。
コンピュータに詳しい人なら、PDF化は容易であろう。しかし、コンピュータに不慣れな人にはこれが難しく感じられるはずである。
そこで、簡単にPDF化する方法として、以下のものを勧めたい（なお、以下の方法はWindows限定）。
次の文字列を tex2pdf.bat という名で保存する1。
cd %~dp0 uplatex novel dvipdfmx novel この tex2pdf.bat を、novel.tex と同じフォルダに入れておく。あとは、tex2pdf.bat をダブルクリックすると、見事PDFファイルが生成されるはずである。
本文の書き方 上で、novel.tex というファイルを作った。それをここに再掲する。
\documentclass[a6paper,papersize,autodetect-engine]{jsbook} \usepackage{novelstyle} \begin{document} （ここに本文を書く） \end{document} 基本 （ここに本文を書く） の部分に本文を書けばよい。たとえば以下のように書く。
\documentclass[a6paper,papersize,autodetect-engine]{jsbook} \usepackage{novelstyle} \begin{document} 吾輩は猫である。名前はまだ無い。 どこで生れたかとんと見当がつかぬ。何でも薄暗いじめじめした所でニャーニャー泣いていた事だけは記憶している。吾輩はここで始めて人間というものを見た。しかもあとで聞くとそれは書生という人間中で一番獰悪な種族であったそうだ。この書生というのは時々我々を捕えて煮て食うという話である。 \end{document} 通常のLaTeX記法であれば、段落毎に空行を挟む必要があるが、小説を書くときにそのようなLaTeX記法で書くと台詞が連続する場合などに入力しづらい。そこで、novelstyle.sty では、空行を挟まずとも段落分けできるようにしてある。つまり、Wordなどで書くときとほぼ同じ感覚で本文を書けばよい。
ルビ ルビを振りたいときは、ルビマクロが使える。
\documentclass[a6paper,papersize,autodetect-engine]{jsbook} \usepackage{novelstyle} \begin{document} \ruby[h]{吾輩}{わが|はい}は猫である。名前はまだ無い。 どこで生れたかとんと見当がつかぬ。何でも薄暗いじめじめした所でニャーニャー泣いていた事だけは記憶している。吾輩はここで始めて人間というものを見た。しかもあとで聞くとそれは書生という人間中で一番\ruby[h]{獰悪}{どう|あく}な種族であったそうだ。この書生というのは時々我々を捕えて煮て食うという話である。 \end{document} ルビマクロの使い方は、LaTeX 文書で“美しい日本の”ルビを使う ～pxrubrica パッケージ～を参照せよ。</description>
    </item>
    
    <item>
      <title>本作りに役立つサイト</title>
      <link>https://qdaibungei.github.io/latex/documents/2017-02-25-bookmake/</link>
      <pubDate>Sat, 25 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2017-02-25-bookmake/</guid>
      <description>ここでは小説本を作るのに役立つサイトを列挙する。
組版の知識全般 特定のソフトウェアによらない、組版の普遍的な知識を得られるサイトを列挙した。上二つは必読。
小説同人誌のための組版レイアウトとDTP かっちりとした文章で組版に必要な知識を網羅してくれている。
簡易版・同人誌の作り方実録編 第5回「小説本の作り方！」 ポイントがまとまっていて役立つ。「これだけは素人くさく見えてしまうので厳禁！」といった実践的アドバイス多数。続編記事に「小説本の作り方」フォローアップ(1)：本文用紙の種類があり、併せて読むとよい。
文字を組む方法 プロの手による連載記事。
組版―Wikipedia 用語の確認に。
日本語組版処理の要件 技術者向け。
LaTeX関連 吉永徹美のLaTeX研究室 TeXコンサルタントの吉永徹美氏のサイト。残念ながら、いつのまにか閉鎖されてしまった。しかしインターネットアーカイブは残っているので中身は今も読むことができる。
MyTeXpert 書籍ではなくネットの文書でLaTeXに入門するなら、吉永氏のサイトかこのサイトがよいだろう。
よくわかるLaTeX小説サポートページ 同人誌として売られている『よくわかるLaTeX小説』という本のサポートページ。本を買っていなくても役立つ。
ルビのついた縦書の日本語文章をPDFにする方法 私が初めてLaTeXで小説を組もうとしたとき参考にしたサイト。このサイトには他にも「喘ぎ声ジェネレータ」などの面白いツールが公開されていたのだが、今確認してみたら、残念なことにいつのまにか閉鎖されていた。
編集者のためのTeX/LaTeX入門 LaTeXとは何か、ざっと概要を知りたいならこれ。
あがきながら覚えるTeX TeXで小説組版する方法を、あがきながら研究しているサイト。LaTeX初心者にも配慮された良心的な作りで、TeXインストール方法から解説してある。小説に特化しているのでわれわれ文藝人間にとってはありがたいサイトである。</description>
    </item>
    
    <item>
      <title>hanmenパッケージ</title>
      <link>https://qdaibungei.github.io/latex/documents/2017-02-18-hanmen/</link>
      <pubDate>Sat, 18 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2017-02-18-hanmen/</guid>
      <description>はじめに hanmenパッケージというLaTeXパッケージを作った。ダウンロードはここからできる。
hanmenパッケージとは、版面の設計1を厳密に行うためのパッケージである。たとえば、38字×40行で文書を作りたい、といったときにhanmenパッケージは有用である。
従来、LaTeXでは版面の設計が煩雑であった2。とくに縦組みの場合、geometryパッケージが使えないので厄介である。そこで、縦組みでも版面設計がやりやすいようにと作ったのがhanmenパッケージである。
基本的なアイディアはTomOne氏の『よくわかるLaTeX小説』3による。
なお、2017年2月18日現在、あべのり氏によって開発中のクラスファイルであるjlreq.clsは、従来のクラスファイルより圧倒的に版面設計が行いやすいようになっているようなので、jlreq.clsの安定版がリリースされたあかつきには、hanmenパッケージの存在意義は薄れゆくであろうと思われる。
使い方 基本 基本的な使い方は簡単である。プリアンブルに次のように書き込む。
\usepackage[Q=15,H=24,W=38,L=40]{hanmen} そうすると、
 文字サイズ　15級 行送り　24歯 行長　38字 行数　40行  に設定できる。Q は文字サイズの単位「級」に、H は行送りの単位「歯」に、W はwidthに、L はlinesに由来している。
各種オプション グリッド線を表示させる（gに代入する値は上のWで指定した文字数と同じか、または近い整数値を入れる）。
\usepackage[g=38]{hanmen} 　縦組みにする。
\usepackage[tate]{hanmen} 　ヘッダ・フッタの位置の調整。
\usepackage[headheight=13truemm, headsep=1truemm, footskip=3truemm]{hanmen} 　小口側に寄せる、天側に寄せる。
\usepackage[ko=3truemm]{hanmen}%% 3mm小口寄せ\usepackage[te=4truemm]{hanmen}%% 4mm天寄せ 　文字サイズ単位にQではなくptを使う。
\usepackage[pt]{hanmen} 　このパッケージは新ドキュメントクラスで使うことを想定している。旧ドキュメントクラスで使う場合、オプションを付けないと、文字サイズが正しく設定されない。
\usepackage[jisfontzoom]{hanmen} 提供されるマクロ \newhanmen \newhanmen というマクロが提供される。これは、本文中で、
\newhanmen{Q=11.5,H=19,W=42,L=17} などとすると、文書の途中から基本版面を再設定できるマクロである。上記のオプションはすべてここでも使うことができる。
\hanmenchangedir 本文領域はそのままに、組方向だけ変えたい場合に使えるのが \hanmenchangedir である。本文中、このマクロを記述すると組方向だけが切り替わる。
提供される機能 正確な単位の導入 \bQ および \bbp を導入した。これによって、和文文字に関して、より正確に文字サイズを設定できるようになった。
事情を知らない人には意味が分からないだろうが、LaTeXの文字サイズ単位に関しては複雑な事情があり、そのため上のように新たに単位を導入する必要に迫られるのである。詳しくは、吉永氏によるクラスファイルにおける文字サイズの設定などを参照せよ。
フォントサイズの再定義 hanmenパッケージで \usepackage[Q=13]{hanmen} のように文字サイズを変更した場合、それに伴って \small や \huge といったLaTeXに備わった文字サイズ変更マクロが再定義され、文字サイズや行送りサイズが、商業出版で行われているように0.</description>
    </item>
    
    <item>
      <title>jdashパッケージ</title>
      <link>https://qdaibungei.github.io/latex/documents/2017-02-17-jdash/</link>
      <pubDate>Fri, 17 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2017-02-17-jdash/</guid>
      <description>導入 jdashパッケージというLaTeXパッケージを作った。ダウンロードはここからできる。
jdashというのはjapanese dashの略のつもりである。日本語文に現れる記号ダッシュ ― は、通常何個か並べて一本の線のようにして使うが、フォントによっては一本の線に見えない。一本の線のように見せるには工夫が必要だ。その工夫をパッケージ化したものがjdashパッケージだ。
ところで、人によってはときおり放心状態で「あ～～～」と声にならない声を発したくなることがある。しかしこれでは、波ダッシュ ～ がつながって見えないのでいまいち放心状態であることが伝達されにくい。そこで波線をつなげられるような工夫が必要となる。jdashパッケージでは、その工夫をも盛り込んだ。
使い方 ダッシュ この文章でも使っているようなふつうのダッシュ――あるいはダーシとも言う――を出力するには、\jdash という命令を使う。
\jdash[2] のように数字を与えれば、この例の場合2字分の長さのダッシュが出力される。なお、2字分の長さのダッシュ（倍角ダッシュ）に限り、\―― という命令でも出力可能に設定してある。
デフォルトでは、通常のダッシュ記号 ― を重ねることで一本につながったダッシュを出力するようにしている。このやり方は美文書などでも紹介されている有名なやり方である。
しかしPDFで見たときダブって見える弱点もある。そこでPDFで閲覧するときのために、罫線 ─ を使った表示ができると都合がよい。そこで容易している命令が \jdashmode である。
\jdashmode{0} % デフォルト \jdash[3] % ダブったダッシュが出る  \jdashmode{1} % ダッシュ記号を罫線に変更 \jdash[3] % 罫線で出力される 波ダッシュ 「あ～～～～」と叫びたいとき、あるいはTeX言語話者らしく「えくすぱんどあふた～～～～！」と叫びたいときには波ダッシュがつながっていると便利だ。そのために \～ という命令を用意してある（wave dashの略のつもり）。\～ という命令を並べれば、波ダッシュ記号 ～ がいくらでもつながる。
えくすぱんどあふた\～\～\～\～\～\～\～！ フォントによっては波線同士の食い込み量がまずくて、うまくつながらないかもしれない。その場合は \wdashKerningAmount{数字} という命令を使う。数字の単位は zw である。
% \wdashKerningAmount{.25} % デフォルト。0.25zw分、波線が食い込む。 \wdashKerningAmount{.261} % 食い込み具合を変更。筑紫明朝はこのくらい食い込ませるとうまく波線がつながる。 なお、一部のライトノベルで使われているような波線 〰 の表示もできる。このために \wdashmode という命令が容易されている。なお、これの出力には \CID を使っているのでotfパッケージが必要となっている。
% \wdashmode{0} % デフォルト \wdashmode{1} % 波線表示の切り替え 結尾 とりあえず、使ってみるなり、使ってみないなりしてください。おしまい。</description>
    </item>
    
    <item>
      <title>小説を入力する方法</title>
      <link>https://qdaibungei.github.io/latex/documents/2017-02-11-input/</link>
      <pubDate>Sat, 11 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2017-02-11-input/</guid>
      <description>はじめに ここでは、九大文藝部の部誌へ投稿する小説をどう入力するべきかについて概観する。
以下、「こうするのが事実上の標準だ」という入力規則であって、何か特別なこだわりを著者が持つ場合、必ずしも厳密に従わなくてもよい。
書き方 行頭 行頭にはインデントが要る。インデントは全角空白で表現する。次のように（なお、この文書内では全角空白をアンダーバー ＿ で表現することとする）。
＿吾輩は猫である。名前はまだない。  括弧の処理 ただし、行頭が括弧の場合、空白は不要である。
「この文章書くのだるい」と私は言った。  会話文の行頭だけでなく、たまたま行頭に括弧が来る場合も、空白は不要である。
 誤： ＿〈あ〉という平仮名は、〈安〉という漢字が崩れて成立した文字である。 正： 〈あ〉という平仮名は、〈安〉という漢字が崩れて成立した文字である。  また、閉じ括弧の直前に句点は不要である。つまり、「あいうえお。」 とするのではなく、「あいうえお」 とする。
三点リーダ、ダッシュ 三点リーダ … やダッシュ ― は、偶数個ずつで使うのが普通である。
「……お兄さま。お兄さま。お兄さまお兄さまお兄さまお兄さまお兄さま。……モウ一度……今のお声を……聞かしてエ――ッ…………」  ちなみに、Google日本語入力を使っている場合、ｚ。 と打つと … に変換されるので便利だ。覚えておいて損はない。さらにちなみにだが、Google日本語入力だと他にも ｚ「 と打つと 『 に変換されるなどのショートカットがある。便利である。
長音記号 先程のように、「聞かしてエ――ッ」などと叫ばせたい場合、長音記号 ー を並べて書くと不格好である。
「聞かしてエーーッ」  それゆえ、この場合、
「聞かしてエ――ッ」  というふうにダッシュ記号を使うほうが見栄えがよい。
疑問符・感嘆符 疑問符 ？ や感嘆符 ！ の後には全角空白を置く。
何だって……？＿そうじゃない。  ただし、後ろが三点リーダのときは全角空白がなくてもよい。
相手がキチガイ博士だから、初めから本当にして聞いていない……？……ウハッ。  疑問符と感嘆符をセットで使う場合、
なんだって！？  のように全角文字で ！？ と書くと見栄えが悪い（あと、編集がダルい）ので、これは半角で !? と書く。あるいは、⁉ を使ってもよい。</description>
    </item>
    
    <item>
      <title>Wordのオートインデント機能を停止させる</title>
      <link>https://qdaibungei.github.io/latex/documents/2017-02-10-noautoindent/</link>
      <pubDate>Fri, 10 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2017-02-10-noautoindent/</guid>
      <description>はじめに Wordはおせっかい機能が多いことで有名である。中でも文芸サークルにおいて悪名高いのがオートインデント機能である。そこでここでは、このうざったいオートインデント機能が動作しないように設定する方法を記す。
手順 まず、赤丸で囲ったところをクリック。
　次に、オプションをクリック。
　オートコレクトのオプションをクリック。
　入力オートフォーマットタブの「行の始まりのスペースを字下げに変更する」のチェックボックスを外す。図は、チェックボックスを外した状態である。
追記：「Tab/Space/BackSpaceキーでインデントとタブの設定を変更する」のチェックも外す必要があるらしい、という情報をネットで得た。私の環境では初めから外れていた。
むすび オートインデント機能を切る方法は直感的に分かりづらい。Wordがそのような分かりづらい作りになっているのはなぜであろうか。まったく不可解である。もしかすると宇宙人の陰謀かもしれない。NASAなどが早急に原因究明にあたってくれることを強く望む。</description>
    </item>
    
    <item>
      <title>初心者による初心者のための小説DTP入門の原稿の残骸</title>
      <link>https://qdaibungei.github.io/latex/documents/2016-11-29-dtp-guide-zangai/</link>
      <pubDate>Tue, 29 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2016-11-29-dtp-guide-zangai/</guid>
      <description>はじめに この文書の目的 この文書の狙いは、読みやすい小説の同人誌を作成するにはどうすればよいかを、主にDTPの観点から解説することにあった（が、この目標は断念を余儀なくされた1）。
主な対象読者は、小説の同人誌づくりの工程のうち、本文データ作成で悩んでいる人たちである。すなわち、
 同人誌を作ってみたが、どうも本文が読みづらい 商業本に比べて見劣りがする  と漠然と感じている人や、
 Wordに小説本文を流し込んでみたが、『!?』が横倒しになって気持ち悪い ルビを振ると行間が空いてしまう  といったように、意図した通りのデータ作成ができず苦しんでいる人が該当する。
私の方針 今回、初心者向けということで、以下の方針を採用することとした。
 できるだけ安く ただし使用ソフトはWord  できるだけ安く済ませるに越したことはない。特に初心者の場合、いきなり高価なソフトに手を出すのはあまり賢いやり方ではないであろう。
ただし、使用ソフトはWordを採用した2。これは、初心者の場合Wordが最も操作に慣れていると考えられたからである。もちろん、WordがなければLibreOfficeで代用して構わない。
注意 私の独断と偏見が多分に混じっていることを留意されたい。
フォント まずはフォントの選定からである。フォントは本文の印象を担う重要なファクターであり、慎重に選ぶ必要がある。フォントは商用のものを購入すると非常に高価なので、まずは無料フォントの中から選ぶことにする3。
結論から言ってしまえば、本文フォントは以下の4つのいずれかを使用するのが無難であろう。これらはすべて無料で使えるが、ただしヒラギノだけはMacにしか付いていない。
 游明朝 ヒラギノ IPAex明朝 F910明朝W3-IPA  個人的には、MS明朝は避けたほうがよいと考えている。
MS明朝 MS明朝を使ってはならない理由は、端的に「読みづらい」からである。
そもそもMS明朝は小説向きのフォントではない。もともと、MS明朝は解像度の低いディスプレイ用に開発されたフォントであり、印刷向きではないのである。その証拠に、開発元のサイトを見ると、
 そのころは、ディスプレイの解像度が低く、小さな画面で、いかに小さい文字まできれいに表示させるかということでいろいろな工夫をしました。
 と書いてある。推測するに、MS明朝のひらがなが独特な形状をしている（直線が多用されていたり、少しばかり大きめだったりする）のは、解像度が低いディスプレイでも字が潰れず読めるように、という工夫だと思われる。
当時は大変役に立ったであろうそうした工夫は、我々の目指す「美しい小説本をつくる」という目的の前ではむしろ百害あって一理なしである。
游明朝 游明朝は、最も小説向きと言えるだろう。公式サイトには次のように書いてあり、小説用に開発されたフォントであることが明言されている。
 游明朝体ファミリーは「時代小説が組めるような明朝体」をキーワードに、単行本や文庫などで小説を組むことを目的に開発した游明朝体Rを核とした明朝体ファミリーです。
 游明朝は現在、Windows および Mac に標準で付属している。
なお、最新のMacには「游明朝体36ポかな」という仮名書体が付属している（游明朝の漢字部分と組み合わせて使う）。公式サイトを見ると、もともとは見出しフォントとしての使用を想定しているようである。したがって、本文フォントとして読みやすいのかどうか定かではない。場合によっては使ってみてもよいかもしれない。
ヒラギノ ヒラギノフォントは、とにかく美しいフォントである。ファンも多い。「ヒラギノを目当てにMacを買った」という人も結構いる（フォント単体を買うよりMacごと買ったほうが安いので、しばしば「ヒラギノを買ったらMacがついてきた」と表現される）。
個人的な意見では、小説よりは横書きの文書に適しているように思うが、縦書きの小説に使用してもさほど問題はなかろう。
Macにしか付属していないのがちょっと残念である。
IPAex明朝 独立行政法人情報処理推進機構（IPA）が作ったフォントである。無料でダウンロードできる。特に小説向きというわけでもないが、普通に本文書体として活用できるフォントである。
F910明朝W3-IPA 「現代的な骨格と古くからある味わいを融合した明朝体」とのことである。漢字部分は上で紹介した「IPAフォント」を、ひらがなやカタカナは「フォント910」という会社で作ったものを組み合わせて作られたフォントである。築地体というのか、仮名部分が古風な雰囲気なのが嬉しい。ただ本文に使うには、ちょっと仮名が大きいような気がしないでもない。
古風といえば「はんなり明朝」もIPAフォントの漢字に古風な仮名書体を合わせたフリーフォントだが、こちらは縦書きで使うと縦の線が揃わなくてあまり読みやすくない、という意見をどこかで見た気がする。真偽の程は定かではないが。美しさについては、最終的には自分の目で判断するしかないであろう。
版面設計 本文領域のレイアウトのことを、版面という。この版面設計こそが、小説本の読みやすさを左右する最重要の工程である。
基本的には、次の4点を決定することで、版面設計したことになる。
 文字サイズ 行送りサイズ 1行あたりの文字数 1ページあたりの行数  文字サイズ 好きなフォントを選んだら、次に本文の文字サイズを決めよう。大きすぎても小さすぎてもいけない。基本的には市販の本を見て、それに合わせるのがよいだろう。</description>
    </item>
    
    <item>
      <title>小説校正のための正規表現集</title>
      <link>https://qdaibungei.github.io/latex/documents/2016-10-09-kousei/</link>
      <pubDate>Sun, 09 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2016-10-09-kousei/</guid>
      <description>背景  小説集の編集をやっている。 インデントは全角空白で表現、ただし文頭が括弧の場合は空白不要、などの表記ルールを（明示はしていないが暗黙のうちに）定めている。  問題  著者たちはパソコンに熟達している人ばかりでなく、そのためインデント規則など表記ルールが守られていない原稿がよく送られてくる。  解法  以下のような正規表現を使って置換する。置換すべき項目がリストアップしてあると便利なので、以下に記しておく。上が検索文字列、下が置換後文字列。  インデントがないとき全角空白を挿入 ^([^　「『（〈【〔《［｛〝])
\1
括弧前に空白があれば削除 ^　([「『（〈【〔《［｛〝])
\1
文末の不要な空白を削除 [ ]+$

半角括弧→全角括弧 ((.+?))
（\1）
2連続で使用されている疑問符・感嘆符は半角に [！？]{2,}

その他 青空文庫作業マニュアル【校正編】は参考になる。</description>
    </item>
    
    <item>
      <title>校正割り振りスクリプト</title>
      <link>https://qdaibungei.github.io/latex/documents/2016-07-10-kousei-script/</link>
      <pubDate>Sun, 10 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://qdaibungei.github.io/latex/documents/2016-07-10-kousei-script/</guid>
      <description>はじめに 校正割り振りスクリプトをつくった。校正割り振りっていうより、「山分け問題」の解決をするスクリプトって言ったほうがいいか。というかこういう問題ってふつうどう呼ばれているのだろう。検索してもいまいちこれといったものが見つからなかった。「山分け問題」もしくは「分配問題」と呼んでいる本がgoogle booksで見つかったが、これが一般的呼称なのは分からない。
校正割り振りスクリプト 背景  文藝サークルでは、文集や部誌を発行するさい、校正係を置いている。 ここで校正係とは、部員の原稿を事前に読み、誤字脱字などをチェックする係である。 各校正係は、すべての原稿に目を通す必要はなく、自分の担当原稿のみに目を通せばよい（各人がすべての原稿に目を通すのは非効率的であるため）。  問題  校正係へ原稿を割り振るとき、各人が読まねばならぬ原稿の文字数をできるかぎり揃えたい。 しかし、これを手作業で揃えようとすると、面倒である。  解法 以下に示すpythonスクリプトを書いた。すべての可能な組み合わせを考えて、標準偏差を出し、標準偏差の最も低い組み合わせを出力するようにしてある。
# -*- coding: utf-8 -*- import math import itertools list1 = [1011,8595,5064,4978,6751,108,30218,732,&amp;#39;|&amp;#39;,&amp;#39;|&amp;#39;,&amp;#39;|&amp;#39;] junretu = [i for i in itertools.permutations(list1)] # すべての順列をひたすら出力 goodp = [] # good permitation listhozon = [] # list保存 # 標準偏差 standard deviation sd = -1 for p in junretu: list2 = [] p = list(p) i = [i for (i, x) in enumerate(p) if x == &amp;#39;|&amp;#39;] # 区切り位置の取得 # 取得した区切り位置を元に数字の組み合わせのリストを作る c = 0 for x in i: list2.</description>
    </item>
    
  </channel>
</rss>